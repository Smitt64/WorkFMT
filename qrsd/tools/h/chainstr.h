/*******************************************************************************
 FILE         :   CHAINSTR.H

 COPYRIGHT    :   R-Style Software Lab, 1999

 DESCRIPTION  :   Chain of strings

 PROGRAMMED BY:   Alexey Lebedev

 CREATION DATE:   30 Jun 1999

 VERSION INFO :   $Archive: /RSTool400/DBTrv400/creat/include/chainstr.h $
                  $Revision: 1 $
                  $Date: 15.07.99 11:43 $
                  $Author: Lebedev $
                  $Modtime: 9.07.99 14:57 $
*******************************************************************************/

#ifndef __CHAINSTR_H
#define __CHAINSTR_H

#include <stddef.h>

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
                           Цепочка строк

   Цепочка строк - это последовательность отдельных строк, каждая из которых
заключена в апострофы, которые отделяются друг от друга пробелами, и все вместе
представлют собой Си-строку, завершенную нулем. Количество пробелов между
строками может быть произвольным, недопустимым является лишь их полное отсутствие.
   Если строка, входящая в цепочку, содержит апостроф, то он должен быть заменен
на два апострофа.

   Примеры:
   'ABCD'   'EFGH'   'XYZ';  // количество пробелов может быть произвольным
   'work''s';         // апостроф внутри строки заменяется на два апострофа
   '' '' '';    // строки могут быть пустыми

********************************************************************************
                     Позиция в цепочке строк

   Позиция в цепочке строк - это смещение от начала цепочки в байтах.
По этому смещению в цепочке должен находиться КОНЕЧНЫЙ апостроф некоторой строки.
Позиция равная  0, указывает на начало цепочки.
Позиция равная -1, указывает на конец цепочки.
*******************************************************************************/

   /*
    * chainstr_link - присоединить строку к цепочке.
    *
    * Параметры:
    *   chain     - цепочка строк
    *   length    - текущая длина цепочки в байтах
    *   str       - строка, котрую нужно присоединить
    *
    * Возвращает длину цепочки в байтах после присоединения строки
    */
size_t chainstr_link(char *chain, size_t length, const char *str);

   /*
    * chainstr_cancat - канкатенировать строку к цепочке
    *
    * Параметры:
    *   chain     - цепочка строк
    *   str       - строка, котрую нужно канкатенировать
    *
    * Возвращает указатель на последний символ в цепочке
    */
   /*char* chainstr_cancat(char* chain, const char* str);*/

   /*
    * chainstr_insert - вставить строку в цепочку
    *
    * Параметры:
    *   chain     - цепочка строк
    *   pos       - позиция в цепочке, в которой нужно сделать вставку
    *   str       - строка, котрую нужно вставить
    *
    * Возвращает позицию в цепочке следующую за вставленной строкой
    */
size_t chainstr_insert(char *chain, size_t pos, const char *str);

   /*
    * chainstr_replace - заменить строку в цепочке
    *
    * Параметры:
    *   chain     - цепочка строк
    *   pos       - позиция в цепочке, в которой нужно сделать замену
    *   str       - строка, на которую следует выполнить замену
    *
    * Позиция должна указывать на начальный апостроф строки, которую следует
    * заменить.
    * Возвращает позицию в цепочке следующую за вставленной строкой
    */
   /*size_t chainstr_replace(char* chain, size_t pos, const char* str);*/

   /*
    * chainstr_trim - удалить в цепочке лишние пробелы.
    * Удаляются все пробелы перед первой и после последней строки.
    * Между строками остается по одному пробелу.
    *
    * Параметры:
    *   chain     - цепочка строк

    * Возвращает длину цепочки в байтах
    */
size_t chainstr_trim(char *chain);

   /*
    * chainstr_nitems - подсчитать количество строк в цепочке.
    *
    * Параметры:
    *   chain     - цепочка строк

    * Возвращает количество строк в цепочке
    */
int chainstr_nitems(const char *chain);

   /*
    * chainstr_next - найти и выделить следующую строку в цепочке
    *
    * Параметры:
    *   chain     - цепочка строк
    *   pos       - позиция в цепочке, начиная с которой нужно искать строку
    *   buf       - буфер для сохранения результата поиска

    * Возвращает позицию в цепочке.
    * Если достигнут конец цепочки возвращается -1.
    */
size_t chainstr_next(const char *chain, size_t pos, char *buf);

   /*
    * chainstr_prev - найти и выделить предыдущую строку в цепочке
    *
    * Параметры:
    *   chain     - цепочка строк
    *   pos       - позиция в цепочке, начиная с которой нужно искать строку
    *   buf       - буфер для сохранения результата поиска

    * Возвращает позицию в цепочке.
    * Если достигнуто начало цепочки возвращается 0.
    */
   /*size_t chainstr_prev(const char* chain, size_t pos, char* buf);*/

   /*
    * chainstr_item - найти и выделить строку в цепочке по ее порядковому номеру
    *
    * Параметры:
    *   chain     - цепочка строк
    *   item      - порядковый номер строки
    *   buf       - буфер для сохранения результата поиска
    *
    * Возвращает позицию в цепочке, аналогичную операции next.
    * Если строки с требуемым номером нет, возвращается -1.
    */
size_t chainstr_index(const char *chain, int index, char *buf);

   /*
    * is_unique_chainstr - проверить уникальность строк в цепочке.
    * is_unique_skipempty_chainstr - проверить уникальность строк в цепочке,
    *                      пропуская пустые строки.
    * is_unique_select_chainstr - проверить уникальность строк в цепочке,
    *                      с user-функцией фильтрацией строк перед проверкой.
    *
    * Параметры:
    *   chain     - цепочка строк
    *   select    - user-функция фильтрации строк перед проверкой уникальности
    *   str_length- максимальная длина строки в цепочке
    *   num_str   - возвращается номер не уникальной строки
    *   num_dup   - возвращается номер дубликата
    *
    * Функция select должна возвращать истину, для строк среди которых
    * должна проверяться уникальность. 
    *
    * Возвращает истину, если все строки в цепочке уникальны.
    * Иначе возвращается ложь и необязательные параметры num_str и num_dup
    * содержат номера дублирующихся строк в цепочке.
    */

int is_unique_chainstr(const char *chain, int str_length, int *num_str, int *num_dup);

int is_unique_skipemty_chainstr(const char *chain, int str_length, int *num_str, int *num_dup);

typedef int (*select_f)(const char *);

int is_unique_select_chainstr(const char *chain, select_f select, int str_length, int *num_str, int *num_dup);

   /*
    * chainstr_parse - разобрать цепочку,
    *
    * Параметры:
    *   chain        - цепочка строк
    *   nitems       - количество строк в цепочке
    *   length_item  - максимальная длина строки в цепочке
    *   length_err   - возвращается длина некорректной строки
    *   next_chain   - возвращает на начало следющей цепочки
    *
    * Возвращает количество успешно разобранных строк.
    * Значение равное nitems означает, что цепочка не содержит строк с ошибками.
    * Значение меньшее nitems означает, что при разборе строки с таким номером
    * была диагностирована ошибка.
    * В этом случае в параметре length_err возвращается длина ошибочной строки.
    * Значение length_err равное -1 означает, что количество строк в цепочке
    * меньше nitems. Иначе length_err содержит значение большее length_item.
    *
    * Если в цепочке содержиться больше чем nitems строк, то возвращенное
    * значение будет равно nitems+1 и в параметре next_chain будет возвращен
    * указатель на начало следующей цечпоки.
    */
int chainstr_parse(const char *chain, int nitems, int length_item, int *length_err, char **next_chain);

#ifdef __cplusplus
}
#endif

#endif /* __CHAINSTR_H */

/* <-- EOF --> */