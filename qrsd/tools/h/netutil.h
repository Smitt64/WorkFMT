// -------------------------------------------------------------------------------------------------
// 2018.01.22 Утилитные функции для работы с сетью

#ifndef _NETUTIL_H_
#define _NETUTIL_H_


// -----------------------------------------------------------------------------
#define  dNU_TMP_BUFF  101  // Размер строкового буфера для трансляции адресов


// -----------------------------------------------------------------------------
// Статусы для функций
enum
   {
    NU_STAT_OK = 0,         // Успешное чтение
    NU_STAT_BADPARM,        // Параметр str равен NULL, или указывает на пустую строку,
                            // или mac/ip4 равен NULL.
    NU_STAT_BADFORMAT,      // Содержимое строки не соответствует формату
    NU_STAT_NOMEM,          // Ошибка выделения памяти
    NU_STAT_ADAPTER,        // Ошибка вызова GetAdaptersAddresses
    NU_STAT_WSA             // Ошибка вызова WinSocket-функций
   };

// -----------------------------------------------------------------------------
// Прочитать MAC-адрес из строки
// [out] mac   - Результирующий массив из 6-ти элементов.
// [in]  str   - Исходный MAC-адрес в формате А<delim>Б<delim>В<delim>Г<delim>Д<delim>Е,
//               где <delim> - символ-разделитель, задаваемый параметром delim.
// [in]  delim - Символ-разделитель
// [ret]       - Значение вида NU_STAT_
int NU_ReadFromStringMAC(unsigned char *mac, const char *str, char delim = ':');

// -----------------------------------------------------------------------------
// Прочитать IP4-адрес из строки
// [out] ip4   - Результирующий массив из 4-х элементов.
// [in]  str   - Исходный IP-адрес в формате А.Б.В.Г
// [ret]       - Значение вида NU_STAT_
int NU_ReadFromStringIP4(unsigned char *ip4, const char *str);

// -----------------------------------------------------------------------------
// Записать MAC-адрес в строку
// [out] buff  - Результирующий буфер
// [in]  mac   - Исходный массив MAC-адреса из 6-и элементов
// [in]  delim - Символ-разделитель
// [ret]       - Возвращает указатель на buff (всегда)
char *NU_WriteToStringMAC(char *buff, unsigned char *mac, char delim = ':');

// -----------------------------------------------------------------------------
// Записать IP4-адрес в строку
// [out] buff  - Результирующий буфер
// [in]  ip4   - Исходный массив IP-адреса из 4-х элементов
// [ret]       - Возвращает указатель на buff (всегда)
char *NU_WriteToStringIP4(char *buff, unsigned char *ip4);

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Получить MAC-адрес
// [out] mac   - Результирующий массив из 6-ти элементов.
// [ret]       - Значение вида NU_STAT_
int NU_GetMAC(unsigned char *mac);

// -----------------------------------------------------------------------------
// Получить IP-адрес в формате 4
// [out] ip    - Результирующий массив из 4-х элементов.
// [ret]       - Значение вида NU_STAT_
int NU_GetIP4(unsigned char *ip);

// -----------------------------------------------------------------------------
// Получить имя компьютера
// [out] name  - Результирующий буфер
// [in]  size  - Максимальный размер буфера. По-умолчанию принимается равным dNAME_LEN_COMP
//               (а также в тех случаях, если size < 0 или больше dNAME_LEN_COMP). 
// [ret]       - Значение вида NU_STAT_
int NU_GetCompName(char *name, int size = 0);

// -----------------------------------------------------------------------------
// Получить имя компьютера (с доменом)
// [out] name  - Результирующий буфер
// [in]  size  - Максимальный размер буфера. По-умолчанию принимается равным dNAME_LEN_COMP2
//               (а также в тех случаях, если size < 0 или больше dNAME_LEN_COMP2).
// [ret]       - Значение вида NU_STAT_
int NU_GetCompName2(char *name, int size = 0);

// -----------------------------------------------------------------------------
// Получить имя текущего пользователя
// [out] name  - Результирующий буфер
// [in]  size  - Максимальный размер буфера. По-умолчанию принимается равным dNAME_LEN_USER
//               (а также в тех случаях, если size < 0 или больше dNAME_LEN_USER). 
// [ret]       - Значение вида NU_STAT_
int NU_GetUserName(char *name, int size = 0);

#endif // _NETUTIL_H_

/* <-- EOF --> */