// -------------------------------------------------------------------------------------------------
// 2013-03-29  Инструмент для формирования кодов ошибок, совместимых по формату с кодами
//             ошибок Microsoft. Это позволит использовать функции вида
//             SetLastError/GetLastError без негативных последствий.

#ifndef _RSERROR_H_
#define _RSERROR_H_


// -----------------------------------------------------------------------------
// Кодирование ошибок в формате Microsoft (32 бита)

//  Биты            Назначение
//
//  0 - 15    Код ошибки (0 - 65535)
// 16 - 27    Код подсистемы (0 - 4095)
// 28         Резерв (должен быть 0)
// 29         Принадлежность ошибки:
//                0 - Microsoft
//                1 - пользовательская
// 30 - 31    Тип ошибки:
//                0 - успех
//                1 - информация
//                2 - предупреждение
//                3 - ошибка

// Т.е. для использования аналогичного формата в инструментальном/прикладном коде нужно
// выполнить одно условие: бит 29 должен быть установлен в 1.
//
// Код подсистемы (биты 16 - 27) предполагается разделить на два поддиапазона:
//       0 -  511  - инструмент
//     512 - 4095  - прикладной код
//
// Для инструментального поддиапазона предполагается следующее распределение:
//       0         - общеинструментальная ошибка
//      10 -   19  - компоненты rstools
//      20 -   29  - компоненты rsscript (в т.ч. и RSL)
//      30 -   49  - компоненты rscomserv
//      50 -   69  - компоненты DLM
//      70 -   79  - компоненты rsadmin
//      80 -   99  - компоненты utils
//     100 -  139  - компоненты server (СП и Терминал, исключая утилиты администрирования)
//     500 -  511  - резерв для расширений
//
//
// Для идентификатора подсистемы прикладного кода в качестве первого приближения
// можно выбрать 1000 + ЦелочисленныйКодСимволаПодсистемы.


// -----------------------------------------------------------------------------

// Маска для получения категории ошибки
#define  RSERR_CATEGORY                 0x20000000

// Маска для получения кода ошибки
#define  RSERR_ERROR_MASK               0x0000FFFF

// Маска для получения кода подсистемы
#define  RSERR_SUBSYSTEM_MASK           0x0FFF0000

// Маска для проверки на принадлежность кода подсистемы прикладному коду
#define  RSERR_SUBSYSTEM_USER_MASK      0x0E000000

// Маска для получения типа ошибки
#define  RSERR_TYPE_MASK                0xC0000000


// -----------------------------------------------------------------------------
// Константы для типа ошибки
#define  RSERR_TYPE_OK           0x00  // успех
#define  RSERR_TYPE_INFORMATION  0x01  // информация
#define  RSERR_TYPE_WARNING      0x02  // предупреждение
#define  RSERR_TYPE_ERROR        0x03  // ошибка


// -----------------------------------------------------------------------------

// Определить, является ли ошибка "нашей" (т.е. инструментальной или прикладной -
// вообщем, не является ошибкой Microsoft) по 29-му биту.
#define  RSERR_IsOurError(err)            ((err) & RSERR_CATEGORY)

// Является-ли ошибка инструментальной
#define  RSERR_IsToolsError(err)          ((err) & RSERR_CATEGORY) && !((err) & RSERR_SUBSYSTEM_USER_MASK))

// Является-ли ошибка прикладной
#define  RSERR_IsUserError(err)           ((err) & RSERR_CATEGORY) && ((err) & RSERR_SUBSYSTEM_USER_MASK))


// Получить/установить код ошибки (значение в битах 0 - 15)
#define  RSERR_GetError(err)              ((err) & RSERR_ERROR_MASK)
#define  RSERR_SetError(err, code)        ((err) | ((code) & RSERR_ERROR_MASK))

// Получить/установить код подсистемы (значение в битах 16 - 27)
#define  RSERR_GetSubsystem(err)          (((err) & RSERR_SUBSYSTEM_MASK) >> 16)
#define  RSERR_SetSubsystem(err, code)    ((err) | (((code) << 16) & RSERR_SUBSYSTEM_MASK))

// Получить/установить тип ошибки (значение в битах 30 - 31).
// В качестве type могут использоваться константы вида RSERR_TYPE_.
#define  RSERR_GetErrorType(err)          (((err) & RSERR_TYPE_MASK) >> 30)
#define  RSERR_SetErrorType(err, type)    ((err) | (((type) << 30) & RSERR_TYPE_MASK))


// Сформировать полноформатную ошибку из следующих компонент:
//    type - тип ошибки      (биты 30 - 31)
//    ss   - код подсистемы  (биты 16 - 27)
//    code - код ошибки      (биты 0 - 15)
#define  RSERR_MakeFull(type, ss, code)   (RSERR_CATEGORY | ((((type) << 30) & RSERR_TYPE_MASK) | (((ss) << 16) & \
                                           RSERR_SUBSYSTEM_MASK) | ((code) & RSERR_ERROR_MASK)))

// Сформировать ошибку с заданным кодом для заданной подсистемы
#define  RSERR_MakeError(ss, code)        RSERR_MakeFull(RSERR_TYPE_ERROR, (ss), (code))

// Сформировать информационное сообщение с заданным кодом для заданной подсистемы
#define  RSERR_MakeInformation(ss, code)  RSERR_MakeFull(RSERR_TYPE_INFORMATION, (ss), (code))

// Сформировать предупреждение с заданным кодом для заданной подсистемы
#define  RSERR_MakeWarning(ss, code)      RSERR_MakeFull(RSERR_TYPE_WARNING, (ss), (code))

// Сформировать успешное сообщение с заданным кодом для заданной подсистемы
#define  RSERR_MakeOk(ss, code)           RSERR_MakeFull(RSERR_TYPE_OK, (ss), (code))

#endif // _RSERROR_H_

/* <-- EOF --> */