
//-*--------------------------------------------------------------------------*-
//
// File Name: binder2.hpp
//
// Copyright (c) 1991 - 2005 by R-Style Softlab.
// All Rights Reserved.
//
//-*--------------------------------------------------------------------------*-
// Wed Mar 21 16:09:58 2007  Automatically generated by code generator
//-*--------------------------------------------------------------------------*-

#ifndef __BINDER2_HPP__
#define __BINDER2_HPP__

/*ENUM_SECTION*/

/*CLASS_SECTION*/

/*{{RSCOM_WRAPPER(TBinderItem)*/
class TBinderItem: public TRsPtr<IDispObj>
{
public:
   void getObjectName(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putObjectName(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getPropId() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putPropId(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   unsigned long getPosition() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putPosition(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getFieldName(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putFieldName(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   template<typename  TOut>
   void getDefVal(TOut* retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      *retVal = (TOut)prm.retVal ();
   }
   template<>
   void getDefVal(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void getDefVal (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = p->invoke(0x00000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj(), stat);
   }
   template<typename  T1>
   void putDefVal(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TBinderItems)*/
class TBinderItems: public TRsPtr<IDispObj>
{
public:
   void Item(IDispObj** retVal, unsigned long n) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = n;
      TRsStat stat = p->invoke (0x00000000, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void Add(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffdd7, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void Remove(unsigned long n) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, false, RSFM_CODEPAGE);
      prm [0] = n;
      TRsStat stat = p->invoke (0xfffffdd5, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void Clear() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffdd6, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getCount() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   void get_NewEnum(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffffc, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TConstBinder)*/
class TConstBinder: public TBinderBase
{
public:
   TConstBinder (TAppObj* appPtr):
      TBinderBase (appPtr) {};

   virtual ~TConstBinder () {};

   RSCOM_CONSTRUCT(TConstBinder)

   void Apply(bool bWithSave) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = bWithSave;
      TRsStat stat = invoke (0x00000001, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void Restore() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000002, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void Save() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000007, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void Update(bool bSetVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = bSetVal;
      TRsStat stat = invoke (0x00000004, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getItems(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   bool getEnabledIn() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabledIn(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEnabledOut() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000006, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabledOut(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000006, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TSaveBinder)*/
class TSaveBinder: public TBinderBase
{
public:
   TSaveBinder (TAppObj* appPtr):
      TBinderBase (appPtr) {};

   virtual ~TSaveBinder () {};

   RSCOM_CONSTRUCT(TSaveBinder)

   void Update(bool bSetVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = bSetVal;
      TRsStat stat = invoke (0x00000004, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getItems(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   bool getEnabledIn() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabledIn(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEnabledOut() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000006, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabledOut(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000006, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TDataSrcBinder)*/
class TDataSrcBinder: public TBinderBase
{
public:
   TDataSrcBinder (TAppObj* appPtr):
      TBinderBase (appPtr) {};

   virtual ~TDataSrcBinder () {};

   RSCOM_CONSTRUCT(TDataSrcBinder)

   void Update(bool bSetVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = bSetVal;
      TRsStat stat = invoke (0x00000004, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getItems(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   bool getEnabledIn() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabledIn(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEnabledOut() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000006, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabledOut(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000006, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAutoUpdate() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAutoUpdate(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getDataSource(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   template<typename  T1>
   void putDataSource(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }
   template<typename  T1>
   void putRefDataSource(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TCtrlBinder)*/
class TCtrlBinder: public TBinderBase
{
public:
   TCtrlBinder (TAppObj* appPtr):
      TBinderBase (appPtr) {};

   virtual ~TCtrlBinder () {};

   RSCOM_CONSTRUCT(TCtrlBinder)

   void Update(bool bSetVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = bSetVal;
      TRsStat stat = invoke (0x00000004, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getItems(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   bool getEnabledIn() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabledIn(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEnabledOut() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000006, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabledOut(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000006, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

};
/*RSCOM_WRAPPER}}*/

#endif // !__BINDER2_HPP__
