
//-*--------------------------------------------------------------------------*-
//
// File Name: cmdset2.hpp
//
// Copyright (c) 1991 - 2005 by R-Style Softlab.
// All Rights Reserved.
//
//-*--------------------------------------------------------------------------*-
// Fri Sep 29 15:03:54 2006  Automatically generated by code generator
//-*--------------------------------------------------------------------------*-

#ifndef __CMDSET2_HPP__
#define __CMDSET2_HPP__

/*ENUM_SECTION*/

/*CLASS_SECTION*/

/*{{RSCOM_WRAPPER(TCmdSetItem)*/
class TCmdSetItem: public TRsPtr<IDispObj>
{
public:
   void GetIcon(TRsString& pszILPath, TRsString& pszILName, unsigned long* pdwIndex) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 3, false, RSFM_CODEPAGE);
      prm [0] = pszILPath;
      prm [0].setAttr (RS_OUTFLAG);
      prm [1] = pszILName;
      prm [1].setAttr (RS_OUTFLAG);
      prm [2] = *pdwIndex;
      prm [2].setAttr (RS_OUTFLAG);
      TRsStat stat = p->invoke (0x00000011, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      pszILPath = TRsString (prm [0]);
      pszILName = TRsString (prm [1]);
      *pdwIndex = prm [2];
   }

   void SetIcon(const char* szILPath, const char* szILName, unsigned long dwIndex) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 3, false, RSFM_CODEPAGE);
      prm [0] = szILPath;
      prm [1] = szILName;
      prm [2] = dwIndex;
      TRsStat stat = p->invoke (0x00000012, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void Clone(IDispObj** retVal, bool bRecursive) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = bRecursive;
      TRsStat stat = p->invoke (0x00000016, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void getName(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000014, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putName(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000014, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getCaption(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffdfa, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putCaption(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0xfffffdfa, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   unsigned long getCommand() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putCommand(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool getSeparator() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putSeparator(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool getChecked() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putChecked(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool getGrayed() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putGrayed(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool getVisible() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putVisible(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   unsigned long getPosition() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000006, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putPosition(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000006, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   unsigned short getAccelerator() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffde1, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putAccelerator(unsigned short Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0xfffffde1, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   unsigned char getModifiers() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000007, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putModifiers(unsigned char Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000007, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getHelpString(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putHelpString(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getToolTip(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000009, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putToolTip(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000009, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getGroup(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000013, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putGroup(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000013, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getParameters(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0000000a, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putParameters(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x0000000a, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool getDefault() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0000000b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putDefault(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x0000000b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool getIconOnToolbar() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0000000c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putIconOnToolbar(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x0000000c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool getCaptionOnToolbar() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0000000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putCaptionOnToolbar(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x0000000d, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getParent(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0000000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void getSubItems(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0000000f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   bool getPopup() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000010, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   void getMenu(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000015, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void getCompleteCaption(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000017, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TCmdSetItems)*/
class TCmdSetItems: public TRsPtr<IDispObj>
{
public:
   void Item(IDispObj** retVal, unsigned long dwPos) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = dwPos;
      TRsStat stat = p->invoke (0x00000000, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void Add(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffdd7, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void Remove(unsigned long dwPos) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, false, RSFM_CODEPAGE);
      prm [0] = dwPos;
      TRsStat stat = p->invoke (0xfffffdd5, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void Clear() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffdd6, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void AddEx(IDispObj** retVal, IDispObj* pSrcItem, bool bCopy) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 2, true, RSFM_CODEPAGE);
      prm [0] = pSrcItem;
      prm [1] = bCopy;
      TRsStat stat = p->invoke (0x00000003, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void TearOff(IDispObj** retVal, unsigned long dwPos) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = dwPos;
      TRsStat stat = p->invoke (0x00000002, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void FindByCaption(IDispObj** retVal, const char* szCaption) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = szCaption;
      TRsStat stat = p->invoke (0x00000007, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void FindByGroup(IDispObj** retVal, const char* szGroup) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = szGroup;
      TRsStat stat = p->invoke (0x00000008, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void Paste(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000005, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void Copy(unsigned long dwPos) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, false, RSFM_CODEPAGE);
      prm [0] = dwPos;
      TRsStat stat = p->invoke (0x00000006, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool IsPasteAvailable() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000004, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   void FindByCommand(IDispObj** retVal, unsigned long dwCmd) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = dwCmd;
      TRsStat stat = p->invoke (0x00000009, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void FindDefaultItem(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0000000a, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   long getCount() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   void get_NewEnum(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffffc, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TCmdSetImpl)*/
class TCmdSetImpl: public TCmdSetBaseImpl
{
public:
   TCmdSetImpl (TAppObj* appPtr):
      TCmdSetBaseImpl (appPtr) {};

   virtual ~TCmdSetImpl () {};

   void SearchItemByCommand(IDispObj** retVal, unsigned long dwCmd) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = dwCmd;
      TRsStat stat = invoke (0x00000001, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void SearchItemByName(IDispObj** retVal, const char* szName) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = szName;
      TRsStat stat = invoke (0x00000003, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   unsigned long TrackPopupMenu(unsigned long uFlags, long x, long y) throw (XRSFormsError)
   {
      TParmArray prm (app, 3, true, RSFM_CODEPAGE);
      prm [0] = uFlags;
      prm [1] = x;
      prm [2] = y;
      TRsStat stat = invoke (0x00000004, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void SearchItem(IDispObj** retVal, const char* szPathNameOrCmd) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = szPathNameOrCmd;
      TRsStat stat = invoke (0x00000005, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void getItems(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   long getStorageSchema() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000006, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void getName(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80010000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putName(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80010000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getObject(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018009, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void getParent(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80010008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   bool getGlobalName() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x800100b0, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putGlobalName(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x800100b0, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getGroup(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x800100a0, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putGroup(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x800100a0, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   RSCOM_TYPE_BEGIN_IMP(TCmdSetImpl, TCmdSetBaseImpl, TCmdSet)
   RSCOM_TYPE_END

};
DECLARE_CLASSEX(TCmdSet, TCmdSetImpl);
/*RSCOM_WRAPPER}}*/

#endif // !__CMDSET2_HPP__
