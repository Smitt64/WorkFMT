
//-*--------------------------------------------------------------------------*-
//
// File Name: control2.hpp
//
// Copyright (c) 1991 - 2005 by R-Style Softlab.
// All Rights Reserved.
//
//-*--------------------------------------------------------------------------*-
// Wed Mar 14 14:53:42 2007  Automatically generated by code generator
//-*--------------------------------------------------------------------------*-

#ifndef __CONTROL2_HPP__
#define __CONTROL2_HPP__

/*ENUM_SECTION*/

/*{{RSCOM_ENUM(enAnchorType)*/
#ifndef TYPEDEF_ENUM_ENANCHORTYPE
#define TYPEDEF_ENUM_ENANCHORTYPE
typedef enum enAnchorType
{
   atNone = 0,
   atProportionalHorizontal = 6,
   atProportionalVertical = 7,
   atProportional = 1,
   atCustom = 2,
   atSideHorizontal = 8,
   atSideVertical = 9,
   atSide = 3,
   atRight = 4,
   atBottom = 10,
   atRightBottom = 5
}
enAnchorType;
#endif TYPEDEF_ENUM_ENANCHORTYPE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enHelpNavigator)*/
#ifndef TYPEDEF_ENUM_ENHELPNAVIGATOR
#define TYPEDEF_ENUM_ENHELPNAVIGATOR
typedef enum enHelpNavigator
{
   hnTopic = 1,
   hnTopicId = 2,
   hnKeywordIndex = 3
}
enHelpNavigator;
#endif TYPEDEF_ENUM_ENHELPNAVIGATOR
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enScaleMode)*/
#ifndef TYPEDEF_ENUM_ENSCALEMODE
#define TYPEDEF_ENUM_ENSCALEMODE
typedef enum enScaleMode
{
   smPixel = 1,
   smMillimeter100 = 2,
   smHimetric = 3
}
enScaleMode;
#endif TYPEDEF_ENUM_ENSCALEMODE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enMenuBehavior)*/
#ifndef TYPEDEF_ENUM_ENMENUBEHAVIOR
#define TYPEDEF_ENUM_ENMENUBEHAVIOR
typedef enum enMenuBehavior
{
   mbMerge = 1,
   mbReplace = 2,
   mbContext = 3
}
enMenuBehavior;
#endif TYPEDEF_ENUM_ENMENUBEHAVIOR
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enControlAlign)*/
#ifndef TYPEDEF_ENUM_ENCONTROLALIGN
#define TYPEDEF_ENUM_ENCONTROLALIGN
typedef enum enControlAlign
{
   caLeft = 0,
   caCenter = 1,
   caRight = 2,
   caJustify = 3
}
enControlAlign;
#endif TYPEDEF_ENUM_ENCONTROLALIGN
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enHeaderType)*/
#ifndef TYPEDEF_ENUM_ENHEADERTYPE
#define TYPEDEF_ENUM_ENHEADERTYPE
typedef enum enHeaderType
{
   htNone = 0,
   htFirstPage = 1,
   htOddPage = 2,
   htEvenPage = 4,
   htFirstOddPage = 3,
   htFirstEvenPage = 5,
   htOddEvenPage = 6,
   htAllPage = 7
}
enHeaderType;
#endif TYPEDEF_ENUM_ENHEADERTYPE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enAppearance)*/
#ifndef TYPEDEF_ENUM_ENAPPEARANCE
#define TYPEDEF_ENUM_ENAPPEARANCE
typedef enum enAppearance
{
   atFlat = 0,
   at3D = 1
}
enAppearance;
#endif TYPEDEF_ENUM_ENAPPEARANCE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enBorderStyle)*/
#ifndef TYPEDEF_ENUM_ENBORDERSTYLE
#define TYPEDEF_ENUM_ENBORDERSTYLE
typedef enum enBorderStyle
{
   bsNone = 0,
   bsSingle = 1,
   bsRaisedOuter = 2,
   bsRaisedInner = 3,
   bsModalFrame = 4,
   bsGroupBox = 5
}
enBorderStyle;
#endif TYPEDEF_ENUM_ENBORDERSTYLE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enTextAlign)*/
#ifndef TYPEDEF_ENUM_ENTEXTALIGN
#define TYPEDEF_ENUM_ENTEXTALIGN
typedef enum enTextAlign
{
   taLeft = 0,
   taCenter = 1,
   taRight = 2
}
enTextAlign;
#endif TYPEDEF_ENUM_ENTEXTALIGN
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enPicturePos)*/
#ifndef TYPEDEF_ENUM_ENPICTUREPOS
#define TYPEDEF_ENUM_ENPICTUREPOS
typedef enum enPicturePos
{
   ppStretch = 0,
   ppTiling = 1,
   ppCenter = 2,
   ppRatio = 3
}
enPicturePos;
#endif TYPEDEF_ENUM_ENPICTUREPOS
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enTabOrientation)*/
#ifndef TYPEDEF_ENUM_ENTABORIENTATION
#define TYPEDEF_ENUM_ENTABORIENTATION
typedef enum enTabOrientation
{
   toTop = 0,
   toBottom = 1
}
enTabOrientation;
#endif TYPEDEF_ENUM_ENTABORIENTATION
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enPageSize)*/
#ifndef TYPEDEF_ENUM_ENPAGESIZE
#define TYPEDEF_ENUM_ENPAGESIZE
typedef enum enPageSize
{
   psCustom = 0,
   psLetter = 1,
   psA3 = 8,
   psA4 = 9,
   psA5 = 11
}
enPageSize;
#endif TYPEDEF_ENUM_ENPAGESIZE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enPageOrientation)*/
#ifndef TYPEDEF_ENUM_ENPAGEORIENTATION
#define TYPEDEF_ENUM_ENPAGEORIENTATION
typedef enum enPageOrientation
{
   poPortrait = 1,
   poLandscape = 2
}
enPageOrientation;
#endif TYPEDEF_ENUM_ENPAGEORIENTATION
/*RSCOM_ENUM}}*/

/*CLASS_SECTION*/

/*{{RSCOM_WRAPPER(TControlImpl)*/
class TControlImpl: public TControlBaseImpl
{
public:
   TControlImpl (TAppObj* appPtr):
      TControlBaseImpl (appPtr) {};

   virtual ~TControlImpl () {};

   void SetFocus() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018103, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void Move(long Left, long Top, long Width, long Height) throw (XRSFormsError)
   {
      TParmArray prm (app, 4, false, RSFM_CODEPAGE);
      prm [0] = Left;
      prm [1] = Top;
      prm [2] = Width;
      prm [3] = Height;
      TRsStat stat = invoke (0x80018100, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void GetMenus(IDispObj** retVal, const char* szPath) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = szPath;
      TRsStat stat = invoke (0x8001800a, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void GetImgLists(IDispObj** retVal, const char* szPath) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = szPath;
      TRsStat stat = invoke (0x8001800d, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void getName(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80010000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putName(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80010000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getLeft() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80010003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putLeft(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80010003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getTop() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80010004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putTop(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80010004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getWidth() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80010005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80010005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getHeight() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80010006, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putHeight(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80010006, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getVisible() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80010007, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putVisible(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80010007, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getParent(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80010008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void getObject(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018009, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   long getAnchor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x8001000a, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAnchor(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x8001000a, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enAnchorType getAnchorType() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80010002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enAnchorType((short int)prm.retVal ());
   }
   void putAnchorType(enAnchorType Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80010002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getTag(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x8001000b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putTag(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x8001000b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getTabIndex() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x8001000f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putTabIndex(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x8001000f, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getTabStop() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x8001000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putTabStop(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x8001000e, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getDefault() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80010037, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putDefault(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80010037, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getCancel() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80010038, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putCancel(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80010038, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getToolTip(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80010045, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putToolTip(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80010045, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getSubClass() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018102, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putSubClass(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80018102, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getContextMenu(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018105, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putContextMenu(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80018105, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getHelpFile(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80010034, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putHelpFile(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80010034, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enHelpNavigator getHelpNavigator() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80010033, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enHelpNavigator((short int)prm.retVal ());
   }
   void putHelpNavigator(enHelpNavigator Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80010033, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getHelpKeyword(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80010032, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putHelpKeyword(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80010032, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getEvents(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80010001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void getRawData(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x8001000c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void getObjectType(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018013, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }

   bool getBindable() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018014, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBindable(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80018014, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   template<typename  TOut>
   void getUserProp(TOut* retVal, const char* szPropName) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = szPropName;
      TRsStat stat = invoke (0x80018016, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      *retVal = (TOut)prm.retVal ();
   }
   template<>
   void getUserProp(IDispObj** retVal, const char* szPropName) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = szPropName;
      TRsStat stat = invoke (0x80018016, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void getUserProp (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = invoke(0x80018016, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (app, stat);
   }
   template<typename  T1>
   void putUserProp(const char* szPropName, T1 Var2) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = szPropName;
      prm.putVal () = Var2;
      TRsStat stat = invoke (0x80018016, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getDenyWindowless() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018017, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putDenyWindowless(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80018017, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getFrameStyle() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putFrameStyle(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80018004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getTitle(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putTitle(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80018003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMinTrackWidth() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018006, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMinTrackWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80018006, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMinTrackHeight() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMinTrackHeight(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80018005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMaxTrackWidth() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018007, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMaxTrackWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80018007, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMaxTrackHeight() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMaxTrackHeight(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80018008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enScaleMode getScaleMode() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x8001800e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enScaleMode((short int)prm.retVal ());
   }
   void putScaleMode(enScaleMode Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x8001800e, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enMenuBehavior getMenuBehavior() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x8001800b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enMenuBehavior((short int)prm.retVal ());
   }
   void putMenuBehavior(enMenuBehavior Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x8001800b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getMenuCaption(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018104, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putMenuCaption(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80018104, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getDoSaveRequest() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018012, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putDoSaveRequest(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80018012, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getDesignable() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putDesignable(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80018000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getStorageSchema() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x8001800c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   long getBefore() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018010, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBefore(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80018010, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getAfter() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x8001800f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAfter(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x8001800f, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enControlAlign getAlignment() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enControlAlign((short int)prm.retVal ());
   }
   void putAlignment(enControlAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80018001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enHeaderType getHeader() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80010039, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enHeaderType((short int)prm.retVal ());
   }
   void putHeader(enHeaderType Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80010039, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enHeaderType getFooter() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x8001003a, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enHeaderType((short int)prm.retVal ());
   }
   void putFooter(enHeaderType Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x8001003a, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getKeepWithNext() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x8001000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putKeepWithNext(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x8001000d, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getPrintable() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x8001003b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putPrintable(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x8001003b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getMultiplyBinder(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018015, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putMultiplyBinder(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80018015, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void addOnLoad (MemberFunction* ptr)
   {
      addHandler (0x80018001, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnLoad (MemberFunction* ptr)
   {
      remHandler (0x80018001, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnQueryUnload (MemberFunction* ptr)
   {
      addHandler (0x80018002, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnQueryUnload (MemberFunction* ptr)
   {
      remHandler (0x80018002, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnUnload (MemberFunction* ptr)
   {
      addHandler (0x80018003, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnUnload (MemberFunction* ptr)
   {
      remHandler (0x80018003, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnEnter (MemberFunction* ptr)
   {
      addHandler (0x80018202, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnEnter (MemberFunction* ptr)
   {
      remHandler (0x80018202, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnExit (MemberFunction* ptr)
   {
      addHandler (0x80018203, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnExit (MemberFunction* ptr)
   {
      remHandler (0x80018203, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnContextMenu (MemberFunction* ptr)
   {
      addHandler (0x80018207, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnContextMenu (MemberFunction* ptr)
   {
      remHandler (0x80018207, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnActivate (MemberFunction* ptr)
   {
      addHandler (0x80018204, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnActivate (MemberFunction* ptr)
   {
      remHandler (0x80018204, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnDeactivate (MemberFunction* ptr)
   {
      addHandler (0x80018205, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnDeactivate (MemberFunction* ptr)
   {
      remHandler (0x80018205, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnLoadSessionData (MemberFunction* ptr)
   {
      addHandler (0x80018206, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnLoadSessionData (MemberFunction* ptr)
   {
      remHandler (0x80018206, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnSaveSessionData (MemberFunction* ptr)
   {
      addHandler (0x80018209, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnSaveSessionData (MemberFunction* ptr)
   {
      remHandler (0x80018209, RSCOM_EVENT_LEVEL, ptr);
   }

   RSCOM_TYPE_BEGIN_IMP(TControlImpl, TControlBaseImpl, TControl)
   RSCOM_TYPE_END

};
DECLARE_CLASSEX(TControl, TControlImpl);
/*RSCOM_WRAPPER}}*/



#endif // !__CONTROL2_HPP__
