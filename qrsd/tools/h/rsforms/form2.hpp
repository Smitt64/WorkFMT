
//-*--------------------------------------------------------------------------*-
//
// File Name: form2.hpp
//
// Copyright (c) 1991 - 2005 by R-Style Softlab.
// All Rights Reserved.
//
//-*--------------------------------------------------------------------------*-
// Wed Mar 14 14:53:42 2007  Automatically generated by code generator
//-*--------------------------------------------------------------------------*-

#ifndef __FORM2_HPP__
#define __FORM2_HPP__

/*ENUM_SECTION*/

/*CLASS_SECTION*/

/*{{RSCOM_WRAPPER(TFormImpl)*/
class TFormImpl: public TFormBaseImpl
{
public:
   TFormImpl (TAppObj* appPtr):
      TFormBaseImpl (appPtr) {};

   virtual ~TFormImpl () {};

   template<typename  T1>
   void LoadPicture(T1 vStm) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = vStm;
      TRsStat stat = invoke (0x00000007, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void Disable() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000000b, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void RestoreDisable() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000000c, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void SearchItem(IDispObj** retVal, const char* szPathName) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = szPathName;
      TRsStat stat = invoke (0x0000000d, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void getControls(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void getCaption(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfa, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putCaption(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfa, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enAppearance getAppearance() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdf8, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enAppearance((short int)prm.retVal ());
   }
   void putAppearance(enAppearance Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdf8, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getDesignMode() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putDesignMode(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enScaleMode getScaleMode() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enScaleMode((short int)prm.retVal ());
   }
   void putScaleMode(enScaleMode Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMinWidth() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMinWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMinHeight() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMinHeight(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enBorderStyle getBorderStyle() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe08, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enBorderStyle((short int)prm.retVal ());
   }
   void putBorderStyle(enBorderStyle Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe08, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getFont(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }
   void putRefFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enTextAlign getTextAlign() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enTextAlign((short int)prm.retVal ());
   }
   void putTextAlign(enTextAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getPicture(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdf5, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putPicture(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdf5, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }
   void putRefPicture(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdf5, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enPicturePos getPicturePos() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000006, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enPicturePos((short int)prm.retVal ());
   }
   void putPicturePos(enPicturePos Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000006, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getCurrentItem(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000009, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   bool getEnabled() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   bool getValid() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdf4, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void getJoinBinder(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putJoinBinder(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0000000e, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   RSCOM_TYPE_BEGIN_IMP(TFormImpl, TFormBaseImpl, TForm)
   RSCOM_TYPE_END

};
DECLARE_CLASSEX(TForm, TFormImpl);
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TTabPageImpl)*/
class TTabPageImpl: public TFormImpl
{
public:
   TTabPageImpl (TAppObj* appPtr):
      TFormImpl (appPtr) {};

   virtual ~TTabPageImpl () {};

   bool getEnabled() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabled(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   template<typename  TOut>
   void getIcon(TOut* retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018011, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      *retVal = (TOut)prm.retVal ();
   }
   template<>
   void getIcon(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x80018011, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void getIcon (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = invoke(0x80018011, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (app, stat);
   }
   template<typename  T1>
   void putIcon(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x80018011, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   RSCOM_TYPE_BEGIN_IMP(TTabPageImpl, TFormImpl, TTabPage)
   RSCOM_TYPE_END

};
DECLARE_CLASSEX(TTabPage, TTabPageImpl);
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TTabImpl)*/
class TTabImpl: public TTabBaseImpl
{
public:
   TTabImpl (TAppObj* appPtr):
      TTabBaseImpl (appPtr) {};

   virtual ~TTabImpl () {};

   void GetCurPage(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000005, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   template<typename  T1>
   void SetCurPage(T1 varCtrlId) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = varCtrlId;
      TRsStat stat = invoke (0x00000006, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void SearchItem(IDispObj** retVal, const char* szPathName) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = szPathName;
      TRsStat stat = invoke (0x0000000d, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void getPages(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getMultiRow() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMultiRow(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enTabOrientation getTabOrientation() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enTabOrientation((short int)prm.retVal ());
   }
   void putTabOrientation(enTabOrientation Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getShowTabs() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putShowTabs(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEnabled() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   bool getValid() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdf4, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void getImageList(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putImageList(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getCurPage(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000007, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putCurPage(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000007, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void addOnSelChanging (MemberFunction* ptr)
   {
      addHandler (0x00000002, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnSelChanging (MemberFunction* ptr)
   {
      remHandler (0x00000002, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnSelChange (MemberFunction* ptr)
   {
      addHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnSelChange (MemberFunction* ptr)
   {
      remHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }

   RSCOM_TYPE_BEGIN_IMP(TTabImpl, TTabBaseImpl, TTab)
   RSCOM_TYPE_END

};
DECLARE_CLASSEX(TTab, TTabImpl);
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TRollSectionImpl)*/
class TRollSectionImpl: public TRollSectionBaseImpl
{
public:
   TRollSectionImpl (TAppObj* appPtr):
      TRollSectionBaseImpl (appPtr) {};

   virtual ~TRollSectionImpl () {};

   void getControls(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   enPageSize getPageSize() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enPageSize((short int)prm.retVal ());
   }
   void putPageSize(enPageSize Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getPageWidth() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putPageWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getPageHeight() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putPageHeight(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enPageOrientation getPageOrientation() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enPageOrientation((short int)prm.retVal ());
   }
   void putPageOrientation(enPageOrientation Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginTop() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginTop(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginBottom() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000006, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginBottom(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000006, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginLeft() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000007, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginLeft(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000007, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginRight() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginRight(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getFont(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }
   void putRefFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getCaption(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfa, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putCaption(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfa, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getTemplate(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000009, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putTemplate(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000009, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getJoinBinder(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putJoinBinder(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0000000e, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   RSCOM_TYPE_BEGIN_IMP(TRollSectionImpl, TRollSectionBaseImpl, TRollSection)
   RSCOM_TYPE_END

};
DECLARE_CLASSEX(TRollSection, TRollSectionImpl);
/*RSCOM_WRAPPER}}*/

#endif // !__FORM2_HPP__
