
//-*--------------------------------------------------------------------------*-
//
// File Name: rscontrols.hpp
//
// Copyright (c) 1991 - 2005 by R-Style Softlab.
// All Rights Reserved.
//
//-*--------------------------------------------------------------------------*-
// Wed Mar 14 14:53:42 2007  Automatically generated by code generator
//-*--------------------------------------------------------------------------*-

#ifndef __RSCONTROLS_HPP__
#define __RSCONTROLS_HPP__

/*ENUM_SECTION*/

/*{{RSCOM_ENUM(enBorderType)*/
#ifndef TYPEDEF_ENUM_ENBORDERTYPE
#define TYPEDEF_ENUM_ENBORDERTYPE
typedef enum enBorderType
{
   btAuto = 0,
   btNone = 1,
   btLineSingle = 10,
   btLineDouble = 11,
   btLineTriple = 12,
   btRaisedStatic = 50,
   btSunkenStatic = 51,
   btRaised = 52,
   btSunken = 53,
   btEtched = 54,
   btBump = 55
}
enBorderType;
#endif TYPEDEF_ENUM_ENBORDERTYPE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enLineStyle)*/
#ifndef TYPEDEF_ENUM_ENLINESTYLE
#define TYPEDEF_ENUM_ENLINESTYLE
typedef enum enLineStyle
{
   lsNone = 0,
   lsSolid = 1,
   lsDash = 2,
   lsDot = 3,
   lsDashDot = 4,
   lsDashDotDot = 5
}
enLineStyle;
#endif TYPEDEF_ENUM_ENLINESTYLE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enImgType)*/
#ifndef TYPEDEF_ENUM_ENIMGTYPE
#define TYPEDEF_ENUM_ENIMGTYPE
typedef enum enImgType
{
   imtpNone = 0,
   imtpPicture = 1,
   imtpImgLstItem = 2
}
enImgType;
#endif TYPEDEF_ENUM_ENIMGTYPE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enBindItemType)*/
#ifndef TYPEDEF_ENUM_ENBINDITEMTYPE
#define TYPEDEF_ENUM_ENBINDITEMTYPE
typedef enum enBindItemType
{
   bntDataSrc = 1,
   bntConst = 2,
   bntSave = 3,
   bntMenuConst = 51
}
enBindItemType;
#endif TYPEDEF_ENUM_ENBINDITEMTYPE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enHorAlign)*/
#ifndef TYPEDEF_ENUM_ENHORALIGN
#define TYPEDEF_ENUM_ENHORALIGN
typedef enum enHorAlign
{
   haLeft = 1,
   haCenter = 2,
   haRight = 3
}
enHorAlign;
#endif TYPEDEF_ENUM_ENHORALIGN
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enVertAlign)*/
#ifndef TYPEDEF_ENUM_ENVERTALIGN
#define TYPEDEF_ENUM_ENVERTALIGN
typedef enum enVertAlign
{
   vaTop = 1,
   vaCenter = 2,
   vaBottom = 3
}
enVertAlign;
#endif TYPEDEF_ENUM_ENVERTALIGN
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enValType)*/
#ifndef TYPEDEF_ENUM_ENVALTYPE
#define TYPEDEF_ENUM_ENVALTYPE
typedef enum enValType
{
   vtString = 1,
   vtCharacter = 9,
   vtUnsignedChar = 11,
   vtShort = 12,
   vtInteger = 2,
   vtDecimal = 8,
   vtDouble = 4,
   vtMoney = 3,
   vtDate = 5,
   vtTime = 6,
   vtNumeric = 8
}
enValType;
#endif TYPEDEF_ENUM_ENVALTYPE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enTblLineType)*/
#ifndef TYPEDEF_ENUM_ENTBLLINETYPE
#define TYPEDEF_ENUM_ENTBLLINETYPE
typedef enum enTblLineType
{
   ltAny = 0,
   ltRow = 1,
   ltColumn = 2
}
enTblLineType;
#endif TYPEDEF_ENUM_ENTBLLINETYPE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enTblLineMode)*/
#ifndef TYPEDEF_ENUM_ENTBLLINEMODE
#define TYPEDEF_ENUM_ENTBLLINEMODE
typedef enum enTblLineMode
{
   lmStatic = 0,
   lmTemplate = 1,
   lmDataSource = 2
}
enTblLineMode;
#endif TYPEDEF_ENUM_ENTBLLINEMODE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enHeaderType)*/
#ifndef TYPEDEF_ENUM_ENHEADERTYPE
#define TYPEDEF_ENUM_ENHEADERTYPE
typedef enum enHeaderType
{
   htNone = 0,
   htFirstPage = 1,
   htOddPage = 2,
   htEvenPage = 4,
   htFirstOddPage = 3,
   htFirstEvenPage = 5,
   htOddEvenPage = 6,
   htAllPage = 7
}
enHeaderType;
#endif TYPEDEF_ENUM_ENHEADERTYPE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enEditBtnType)*/
#ifndef TYPEDEF_ENUM_ENEDITBTNTYPE
#define TYPEDEF_ENUM_ENEDITBTNTYPE
typedef enum enEditBtnType
{
   ebtNone = 0,
   ebtCommand = 1,
   ebtSpin = 2
}
enEditBtnType;
#endif TYPEDEF_ENUM_ENEDITBTNTYPE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enMlEditStyle)*/
#ifndef TYPEDEF_ENUM_ENMLEDITSTYLE
#define TYPEDEF_ENUM_ENMLEDITSTYLE
typedef enum enMlEditStyle
{
   mleUnlimNo = 0,
   mleUnlimHor = 1,
   mleUnlimVert = 2,
   mleUnlimBoth = 3
}
enMlEditStyle;
#endif TYPEDEF_ENUM_ENMLEDITSTYLE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enBtnPicturePos)*/
#ifndef TYPEDEF_ENUM_ENBTNPICTUREPOS
#define TYPEDEF_ENUM_ENBTNPICTUREPOS
typedef enum enBtnPicturePos
{
   bpsCenter = 0,
   bpsLeftTop = 11,
   bpsLeftCenter = 12,
   bpsLeftBottom = 13,
   bpsRightTop = 21,
   bpsRightCenter = 22,
   bpsRightBottom = 23,
   bpsAboveLeft = 31,
   bpsAboveCenter = 32,
   bpsAboveRight = 33,
   bpsBelowLeft = 41,
   bpsBelowCenter = 42,
   bpsBelowRight = 43
}
enBtnPicturePos;
#endif TYPEDEF_ENUM_ENBTNPICTUREPOS
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enCheckBtnState)*/
#ifndef TYPEDEF_ENUM_ENCHECKBTNSTATE
#define TYPEDEF_ENUM_ENCHECKBTNSTATE
typedef enum enCheckBtnState
{
   chkFalse = 0,
   chkTrue = 1,
   chkIndeterminate = 2
}
enCheckBtnState;
#endif TYPEDEF_ENUM_ENCHECKBTNSTATE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enListBoxSelMode)*/
#ifndef TYPEDEF_ENUM_ENLISTBOXSELMODE
#define TYPEDEF_ENUM_ENLISTBOXSELMODE
typedef enum enListBoxSelMode
{
   lbsNone = 0,
   lbsSingle = 1,
   lbsExtended = 2,
   lbsMultiple = 3
}
enListBoxSelMode;
#endif TYPEDEF_ENUM_ENLISTBOXSELMODE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enComboBoxStyle)*/
#ifndef TYPEDEF_ENUM_ENCOMBOBOXSTYLE
#define TYPEDEF_ENUM_ENCOMBOBOXSTYLE
typedef enum enComboBoxStyle
{
   cbsSimple = 0,
   cbsDropDown = 1,
   cbsDropDownEditable = 2
}
enComboBoxStyle;
#endif TYPEDEF_ENUM_ENCOMBOBOXSTYLE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enShapeType)*/
#ifndef TYPEDEF_ENUM_ENSHAPETYPE
#define TYPEDEF_ENUM_ENSHAPETYPE
typedef enum enShapeType
{
   stLine = 1,
   stCircle = 2,
   stRect = 3
}
enShapeType;
#endif TYPEDEF_ENUM_ENSHAPETYPE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enFillType)*/
#ifndef TYPEDEF_ENUM_ENFILLTYPE
#define TYPEDEF_ENUM_ENFILLTYPE
typedef enum enFillType
{
   ftNone = 0,
   ftSolid = 1
}
enFillType;
#endif TYPEDEF_ENUM_ENFILLTYPE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enFillForeType)*/
#ifndef TYPEDEF_ENUM_ENFILLFORETYPE
#define TYPEDEF_ENUM_ENFILLFORETYPE
typedef enum enFillForeType
{
   fftNone = 0,
   fftHorizontal = 1,
   fftVertical = 2,
   fftFDiagonal = 3,
   fftBDiagonal = 4,
   fftCross = 5,
   fftDiagCross = 6
}
enFillForeType;
#endif TYPEDEF_ENUM_ENFILLFORETYPE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enLineDirection)*/
#ifndef TYPEDEF_ENUM_ENLINEDIRECTION
#define TYPEDEF_ENUM_ENLINEDIRECTION
typedef enum enLineDirection
{
   ldForward = 0,
   ldBackward = 1,
   ldHorizontal = 2,
   ldVertical = 3
}
enLineDirection;
#endif TYPEDEF_ENUM_ENLINEDIRECTION
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enSldPoint)*/
#ifndef TYPEDEF_ENUM_ENSLDPOINT
#define TYPEDEF_ENUM_ENSLDPOINT
typedef enum enSldPoint
{
   spBoth = 1,
   spTopLeft = 2,
   spBottomRight = 3
}
enSldPoint;
#endif TYPEDEF_ENUM_ENSLDPOINT
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enSplitDragMode)*/
#ifndef TYPEDEF_ENUM_ENSPLITDRAGMODE
#define TYPEDEF_ENUM_ENSPLITDRAGMODE
typedef enum enSplitDragMode
{
   sdmAuto = 0,
   sdmFullDrag = 1,
   sdmSimple = 2
}
enSplitDragMode;
#endif TYPEDEF_ENUM_ENSPLITDRAGMODE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enListViewStyle)*/
#ifndef TYPEDEF_ENUM_ENLISTVIEWSTYLE
#define TYPEDEF_ENUM_ENLISTVIEWSTYLE
typedef enum enListViewStyle
{
   lvsIcon = 0,
   lvsList = 1,
   lvsReport = 2,
   lvsSmallIcon = 3
}
enListViewStyle;
#endif TYPEDEF_ENUM_ENLISTVIEWSTYLE
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enListViewAlign)*/
#ifndef TYPEDEF_ENUM_ENLISTVIEWALIGN
#define TYPEDEF_ENUM_ENLISTVIEWALIGN
typedef enum enListViewAlign
{
   lvaLeft = 0,
   lvaTop = 1
}
enListViewAlign;
#endif TYPEDEF_ENUM_ENLISTVIEWALIGN
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enListViewSort)*/
#ifndef TYPEDEF_ENUM_ENLISTVIEWSORT
#define TYPEDEF_ENUM_ENLISTVIEWSORT
typedef enum enListViewSort
{
   lsrtNone = 0,
   lsrtAscending = 1,
   lsrtDescending = 2
}
enListViewSort;
#endif TYPEDEF_ENUM_ENLISTVIEWSORT
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(enListColumnHeaderMode)*/
#ifndef TYPEDEF_ENUM_ENLISTCOLUMNHEADERMODE
#define TYPEDEF_ENUM_ENLISTCOLUMNHEADERMODE
typedef enum enListColumnHeaderMode
{
   lchmNone = 0,
   lchmSimple = 1,
   lchmSort = 2
}
enListColumnHeaderMode;
#endif TYPEDEF_ENUM_ENLISTCOLUMNHEADERMODE
/*RSCOM_ENUM}}*/

/*CLASS_SECTION*/

/*{{RSCOM_WRAPPER(TBorderStyle)*/
class TBorderStyle: public TRsPtr<IDispObj>
{
public:
   enBorderType getType() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000100, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return enBorderType((short int)prm.retVal ());
   }
   void putType(enBorderType Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000100, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   enLineStyle getLineStyle() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000101, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return enLineStyle((short int)prm.retVal ());
   }
   void putLineStyle(enLineStyle Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000101, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   unsigned long getColor() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000102, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000102, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getWidth() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000103, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000103, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TTableBinder)*/
class TTableBinder: public TRsPtr<IDispObj>
{
public:
   void Add(IDispObj** retVal, const char* szId, enBindItemType eType) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 2, true, RSFM_CODEPAGE);
      prm [0] = szId;
      prm [1] = eType;
      TRsStat stat = p->invoke (0x00000002, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   template<typename  T1>
   void Remove(T1 varId) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, false, RSFM_CODEPAGE);
      prm [0] = varId;
      TRsStat stat = p->invoke (0x00000003, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void Clear() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000004, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getCount() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   template<typename  TOut, typename  T1>
   void getItem(TOut* retVal, T1 varId) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, false, RSFM_CODEPAGE);
      prm [0] = varId;
      TRsStat stat = p->invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      *retVal = (TOut)prm.retVal ();
   }
   template<typename  T1>
   void getItem(IDispObj** retVal, T1 varId) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = varId;
      TRsStat stat = p->invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void getItem (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = p->invoke(0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj(), stat);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TTableBindItem)*/
class TTableBindItem: public TRsPtr<IDispObj>
{
public:
   void Add(IDispObj** retVal, long Index) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = Index;
      TRsStat stat = p->invoke (0x00000002, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void Remove(long Index) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, false, RSFM_CODEPAGE);
      prm [0] = Index;
      TRsStat stat = p->invoke (0x00000003, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void Clear() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000004, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void Activate(bool fActivate) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, false, RSFM_CODEPAGE);
      prm [0] = fActivate;
      TRsStat stat = p->invoke (0x00000005, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void Update(bool p_fSet) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, false, RSFM_CODEPAGE);
      prm [0] = p_fSet;
      TRsStat stat = p->invoke (0x00000037, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getCount() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   void getItem(IDispObj** retVal, long Index) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = Index;
      TRsStat stat = p->invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   bool getEnable() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0000000b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putEnable(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x0000000b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getBinder(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0000000c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   enBindItemType getType() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0000000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return enBindItemType((short int)prm.retVal ());
   }

   void getName(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0000000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putName(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x0000000e, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getPos() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0000000f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putPos(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x0000000f, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getParentItemUpLevel() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000010, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putParentItemUpLevel(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000010, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getParentItemName(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000011, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putParentItemName(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000011, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   template<typename  TOut>
   void getDataSource(TOut* retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000033, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      *retVal = (TOut)prm.retVal ();
   }
   template<>
   void getDataSource(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000033, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void getDataSource (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = p->invoke(0x00000033, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj(), stat);
   }
   template<typename  T1>
   void putDataSource(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000033, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }
   template<typename  T1>
   void putRefDataSource(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000033, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TTableCell)*/
class TTableCell: public TRsPtr<IDispObj>
{
public:
   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   unsigned long getForeColor() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getFont(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffe00, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void putFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }
   void putRefFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   enHorAlign getAlign() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return enHorAlign((short int)prm.retVal ());
   }
   void putAlign(enHorAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   enVertAlign getVertAlign() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return enVertAlign((short int)prm.retVal ());
   }
   void putVertAlign(enVertAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   template<typename  TOut>
   void getValue(TOut* retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      *retVal = (TOut)prm.retVal ();
   }
   template<>
   void getValue(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void getValue (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = p->invoke(0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj(), stat);
   }
   template<typename  T1>
   void putValue(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   enValType getValType() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return enValType((short int)prm.retVal ());
   }
   void putValType(enValType Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x02000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getFormat(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putFormat(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x02000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getFormula(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putFormula(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x02000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getFormulaStatus(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000009, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }

   void getLine(IDispObj** retVal, enTblLineType lineType) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = lineType;
      TRsStat stat = p->invoke (0x0200000f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   bool getReadOnly() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0300000c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putReadOnly(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x0300000c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getMarginLeft() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000011, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putMarginLeft(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000011, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getMarginRight() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000012, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putMarginRight(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000012, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getMarginTop() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000013, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putMarginTop(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000013, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getMarginBottom() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000014, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putMarginBottom(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000014, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getBorderLeft(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void putRefBorderLeft(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getBorderRight(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void putRefBorderRight(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getBorderTop(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void putRefBorderTop(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getBorderBottom(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void putRefBorderBottom(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getTag(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000020, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putTag(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x02000020, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool getCalcPrevPages() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000021, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putCalcPrevPages(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x02000021, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool getWordBreak() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000022, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putWordBreak(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x02000022, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TTableLine)*/
class TTableLine: public TRsPtr<IDispObj>
{
public:
   void AddLine(IDispObj** retVal, const char* szTemplate, const char* szName) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 2, true, RSFM_CODEPAGE);
      prm [0] = szTemplate;
      prm [1] = szName;
      TRsStat stat = p->invoke (0x00000003, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void SetOwner(IDispObj* pOwner, IDispObj* pPrev) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 2, false, RSFM_CODEPAGE);
      prm [0] = pOwner;
      prm [1] = pPrev;
      TRsStat stat = p->invoke (0x00000004, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void ExpandRowset() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000005, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   unsigned long getForeColor() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getFont(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffe00, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void putFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }
   void putRefFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   enHorAlign getAlign() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return enHorAlign((short int)prm.retVal ());
   }
   void putAlign(enHorAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   enVertAlign getVertAlign() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return enVertAlign((short int)prm.retVal ());
   }
   void putVertAlign(enVertAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getMarginLeft() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000011, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putMarginLeft(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000011, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getMarginRight() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000012, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putMarginRight(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000012, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getMarginTop() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000013, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putMarginTop(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000013, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getMarginBottom() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000014, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putMarginBottom(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000014, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getName(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x80010000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putName(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x80010000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   enTblLineMode getMode() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return enTblLineMode((short int)prm.retVal ());
   }
   void putMode(enTblLineMode Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x02000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool getShow() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putShow(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x02000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getSize() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putSize(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x02000002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getOffset() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0200001d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   long getControlOffset() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0200001e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   bool getIsFixed() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000006, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putIsFixed(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x02000006, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool getIsMayBreak() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000007, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putIsMayBreak(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x02000007, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool getIsPageRepeat() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putIsPageRepeat(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x02000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getBorderLeft(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void putRefBorderLeft(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getBorderRight(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void putRefBorderRight(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getBorderTop(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void putRefBorderTop(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getBorderBottom(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void putRefBorderBottom(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getBorderInsideVert(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000006, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void putRefBorderInsideVert(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000006, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getBorderInsideHorz(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000007, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void putRefBorderInsideHorz(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000007, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getOwner(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0200000a, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void getTable(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0200001c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   long getPos() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000017, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putPos(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x02000017, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getChildCount() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0200000b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   void getBindItem(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0000000a, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   template<typename  TOut, typename  T1>
   void getCell(TOut* retVal, T1 varCrossId) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, false, RSFM_CODEPAGE);
      prm [0] = varCrossId;
      TRsStat stat = p->invoke (0x0200000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      *retVal = (TOut)prm.retVal ();
   }
   template<typename  T1>
   void getCell(IDispObj** retVal, T1 varCrossId) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = varCrossId;
      TRsStat stat = p->invoke (0x0200000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void getCell (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = p->invoke(0x0200000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj(), stat);
   }

   template<typename  TOut, typename  T1>
   void getLine(TOut* retVal, T1 varLineId) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, false, RSFM_CODEPAGE);
      prm [0] = varLineId;
      TRsStat stat = p->invoke (0x0200000f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      *retVal = (TOut)prm.retVal ();
   }
   template<typename  T1>
   void getLine(IDispObj** retVal, T1 varLineId) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = varLineId;
      TRsStat stat = p->invoke (0x0200000f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void getLine (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = p->invoke(0x0200000f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj(), stat);
   }

   void getTag(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000020, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putTag(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x02000020, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   enHeaderType getHeader() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000032, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return enHeaderType((short int)prm.retVal ());
   }
   void putHeader(enHeaderType Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000032, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   enHeaderType getFooter() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000033, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return enHeaderType((short int)prm.retVal ());
   }
   void putFooter(enHeaderType Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000033, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool getAutoExpand() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000023, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putAutoExpand(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x02000023, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   template<typename  TOut>
   void getDataSource(TOut* retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x10000018, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      *retVal = (TOut)prm.retVal ();
   }
   template<>
   void getDataSource(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x10000018, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void getDataSource (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = p->invoke(0x10000018, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj(), stat);
   }
   template<typename  T1>
   void putDataSource(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x10000018, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }
   template<typename  T1>
   void putRefDataSource(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x10000018, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TTable)*/
class TTable: public TControl
{
public:
   TTable (TAppObj* appPtr):
      TControl (appPtr) {};

   virtual ~TTable () {};

   RSCOM_CONSTRUCT(TTable)

   void DoInit() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000001, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void AddLine(IDispObj** retVal, const char* szTemplate, const char* szName, enTblLineType lineType) throw (XRSFormsError)
   {
      TParmArray prm (app, 3, true, RSFM_CODEPAGE);
      prm [0] = szTemplate;
      prm [1] = szName;
      prm [2] = lineType;
      TRsStat stat = invoke (0x00000002, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void DelLine(IDispObj* pLine) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = pLine;
      TRsStat stat = invoke (0x00000003, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void SetOwner(IDispObj* pLine, IDispObj* pOwner, IDispObj* pPrev) throw (XRSFormsError)
   {
      TParmArray prm (app, 3, false, RSFM_CODEPAGE);
      prm [0] = pLine;
      prm [1] = pOwner;
      prm [2] = pPrev;
      TRsStat stat = invoke (0x00000004, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getFont(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }
   void putRefFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enHorAlign getAlign() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enHorAlign((short int)prm.retVal ());
   }
   void putAlign(enHorAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enVertAlign getVertAlign() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enVertAlign((short int)prm.retVal ());
   }
   void putVertAlign(enVertAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBinder(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000000a, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   template<typename  TOut, typename  T1, typename  T2>
   void getCell(TOut* retVal, T1 varLineId, T2 varCrossId) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = varLineId;
      prm [1] = varCrossId;
      TRsStat stat = invoke (0x0200000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      *retVal = (TOut)prm.retVal ();
   }
   template<typename  T1, typename  T2>
   void getCell(IDispObj** retVal, T1 varLineId, T2 varCrossId) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, true, RSFM_CODEPAGE);
      prm [0] = varLineId;
      prm [1] = varCrossId;
      TRsStat stat = invoke (0x0200000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void getCell (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = invoke(0x0200000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (app, stat);
   }

   template<typename  TOut, typename  T1>
   void getLine(TOut* retVal, T1 varLineId, enTblLineType lineType) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = varLineId;
      prm [1] = lineType;
      TRsStat stat = invoke (0x0200000f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      *retVal = (TOut)prm.retVal ();
   }
   template<typename  T1>
   void getLine(IDispObj** retVal, T1 varLineId, enTblLineType lineType) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, true, RSFM_CODEPAGE);
      prm [0] = varLineId;
      prm [1] = lineType;
      TRsStat stat = invoke (0x0200000f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void getLine (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = invoke(0x0200000f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (app, stat);
   }

   template<typename  TOut, typename  T1>
   void getTemplateLine(TOut* retVal, T1 varLineId, enTblLineType lineType) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = varLineId;
      prm [1] = lineType;
      TRsStat stat = invoke (0x0200001f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      *retVal = (TOut)prm.retVal ();
   }
   template<typename  T1>
   void getTemplateLine(IDispObj** retVal, T1 varLineId, enTblLineType lineType) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, true, RSFM_CODEPAGE);
      prm [0] = varLineId;
      prm [1] = lineType;
      TRsStat stat = invoke (0x0200001f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void getTemplateLine (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = invoke(0x0200001f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (app, stat);
   }

   bool getPutLastFooter() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0100212c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putPutLastFooter(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0100212c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getHideLineHead() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0100212d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putHideLineHead(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0100212d, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getWrapColumns() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002133, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putWrapColumns(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01002133, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getGetTblWidth() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002134, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   long getGetTblHeight() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002135, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   bool getNeedUpdate() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002137, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putNeedUpdate(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01002137, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getGetTblCell(IDispObj** retVal, long xCord, long yCord) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, true, RSFM_CODEPAGE);
      prm [0] = xCord;
      prm [1] = yCord;
      TRsStat stat = invoke (0x01002136, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void addAfterInsertLine (MemberFunction* ptr)
   {
      addHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }
   void remAfterInsertLine (MemberFunction* ptr)
   {
      remHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnSetHeader (MemberFunction* ptr)
   {
      addHandler (0x00000002, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnSetHeader (MemberFunction* ptr)
   {
      remHandler (0x00000002, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnGetTemplate (MemberFunction* ptr)
   {
      addHandler (0x00000003, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnGetTemplate (MemberFunction* ptr)
   {
      remHandler (0x00000003, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnSetDataSource (MemberFunction* ptr)
   {
      addHandler (0x00000004, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnSetDataSource (MemberFunction* ptr)
   {
      remHandler (0x00000004, RSCOM_EVENT_LEVEL, ptr);
   }

   void addBeforeInsertLine (MemberFunction* ptr)
   {
      addHandler (0x00000005, RSCOM_EVENT_LEVEL, ptr);
   }
   void remBeforeInsertLine (MemberFunction* ptr)
   {
      remHandler (0x00000005, RSCOM_EVENT_LEVEL, ptr);
   }

   void addAfterDeleteLine (MemberFunction* ptr)
   {
      addHandler (0x00000006, RSCOM_EVENT_LEVEL, ptr);
   }
   void remAfterDeleteLine (MemberFunction* ptr)
   {
      remHandler (0x00000006, RSCOM_EVENT_LEVEL, ptr);
   }

   void addBeforeDeleteLine (MemberFunction* ptr)
   {
      addHandler (0x00000007, RSCOM_EVENT_LEVEL, ptr);
   }
   void remBeforeDeleteLine (MemberFunction* ptr)
   {
      remHandler (0x00000007, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnPageCompleted (MemberFunction* ptr)
   {
      addHandler (0x00000020, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnPageCompleted (MemberFunction* ptr)
   {
      remHandler (0x00000020, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnSetFooter (MemberFunction* ptr)
   {
      addHandler (0x00000021, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnSetFooter (MemberFunction* ptr)
   {
      remHandler (0x00000021, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnWordBreak (MemberFunction* ptr)
   {
      addHandler (0x00000022, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnWordBreak (MemberFunction* ptr)
   {
      remHandler (0x00000022, RSCOM_EVENT_LEVEL, ptr);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TOldGrid)*/
class TOldGrid: public TControl
{
public:
   TOldGrid (TAppObj* appPtr):
      TControl (appPtr) {};

   virtual ~TOldGrid () {};

   RSCOM_CONSTRUCT(TOldGrid)

   void DoInit() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000001, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void AddLine(IDispObj** retVal, const char* szTemplate, const char* szName, enTblLineType lineType) throw (XRSFormsError)
   {
      TParmArray prm (app, 3, true, RSFM_CODEPAGE);
      prm [0] = szTemplate;
      prm [1] = szName;
      prm [2] = lineType;
      TRsStat stat = invoke (0x00000002, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void DelLine(IDispObj* pLine) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = pLine;
      TRsStat stat = invoke (0x00000003, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void SetOwner(IDispObj* pLine, IDispObj* pOwner, IDispObj* pPrev) throw (XRSFormsError)
   {
      TParmArray prm (app, 3, false, RSFM_CODEPAGE);
      prm [0] = pLine;
      prm [1] = pOwner;
      prm [2] = pPrev;
      TRsStat stat = invoke (0x00000004, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getFont(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }
   void putRefFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enHorAlign getAlign() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enHorAlign((short int)prm.retVal ());
   }
   void putAlign(enHorAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enVertAlign getVertAlign() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enVertAlign((short int)prm.retVal ());
   }
   void putVertAlign(enVertAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBinder(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000000a, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   template<typename  TOut, typename  T1, typename  T2>
   void getCell(TOut* retVal, T1 varLineId, T2 varCrossId) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = varLineId;
      prm [1] = varCrossId;
      TRsStat stat = invoke (0x0200000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      *retVal = (TOut)prm.retVal ();
   }
   template<typename  T1, typename  T2>
   void getCell(IDispObj** retVal, T1 varLineId, T2 varCrossId) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, true, RSFM_CODEPAGE);
      prm [0] = varLineId;
      prm [1] = varCrossId;
      TRsStat stat = invoke (0x0200000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void getCell (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = invoke(0x0200000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (app, stat);
   }

   template<typename  TOut, typename  T1>
   void getLine(TOut* retVal, T1 varLineId, enTblLineType lineType) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = varLineId;
      prm [1] = lineType;
      TRsStat stat = invoke (0x0200000f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      *retVal = (TOut)prm.retVal ();
   }
   template<typename  T1>
   void getLine(IDispObj** retVal, T1 varLineId, enTblLineType lineType) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, true, RSFM_CODEPAGE);
      prm [0] = varLineId;
      prm [1] = lineType;
      TRsStat stat = invoke (0x0200000f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void getLine (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = invoke(0x0200000f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (app, stat);
   }

   template<typename  TOut, typename  T1>
   void getTemplateLine(TOut* retVal, T1 varLineId, enTblLineType lineType) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = varLineId;
      prm [1] = lineType;
      TRsStat stat = invoke (0x0200001f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      *retVal = (TOut)prm.retVal ();
   }
   template<typename  T1>
   void getTemplateLine(IDispObj** retVal, T1 varLineId, enTblLineType lineType) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, true, RSFM_CODEPAGE);
      prm [0] = varLineId;
      prm [1] = lineType;
      TRsStat stat = invoke (0x0200001f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void getTemplateLine (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = invoke(0x0200001f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (app, stat);
   }

   bool getEnabled() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabled(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getReadOnly() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0300000c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putReadOnly(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0300000c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getLinesAtRoot() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000153, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putLinesAtRoot(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000153, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getCurSelCell(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000154, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefCurSelCell(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000154, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getCurSelLine(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000155, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefCurSelLine(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000155, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void addOnLineAdded (MemberFunction* ptr)
   {
      addHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnLineAdded (MemberFunction* ptr)
   {
      remHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnSetHeader (MemberFunction* ptr)
   {
      addHandler (0x00000002, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnSetHeader (MemberFunction* ptr)
   {
      remHandler (0x00000002, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnGetTemplate (MemberFunction* ptr)
   {
      addHandler (0x00000003, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnGetTemplate (MemberFunction* ptr)
   {
      remHandler (0x00000003, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnSetDataSource (MemberFunction* ptr)
   {
      addHandler (0x00000004, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnSetDataSource (MemberFunction* ptr)
   {
      remHandler (0x00000004, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnCellEnter (MemberFunction* ptr)
   {
      addHandler (0x00000032, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnCellEnter (MemberFunction* ptr)
   {
      remHandler (0x00000032, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnCellExit (MemberFunction* ptr)
   {
      addHandler (0x00000033, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnCellExit (MemberFunction* ptr)
   {
      remHandler (0x00000033, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnLineSelChanged (MemberFunction* ptr)
   {
      addHandler (0x00000034, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnLineSelChanged (MemberFunction* ptr)
   {
      remHandler (0x00000034, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnCellClicked (MemberFunction* ptr)
   {
      addHandler (0x00000035, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnCellClicked (MemberFunction* ptr)
   {
      remHandler (0x00000035, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnCellDblClicked (MemberFunction* ptr)
   {
      addHandler (0x00000036, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnCellDblClicked (MemberFunction* ptr)
   {
      remHandler (0x00000036, RSCOM_EVENT_LEVEL, ptr);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TFormatEdit)*/
class TFormatEdit: public TControl
{
public:
   TFormatEdit (TAppObj* appPtr):
      TControl (appPtr) {};

   virtual ~TFormatEdit () {};

   RSCOM_CONSTRUCT(TFormatEdit)

   void HideBaloon() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000008, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void ShowBaloon(const char* baloonText) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = baloonText;
      TRsStat stat = invoke (0x00000009, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void SetSel(long nStart, long nEnd) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = nStart;
      prm [1] = nEnd;
      TRsStat stat = invoke (0x0000000a, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void GetSel(long* nStart, long* nEnd) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = *nStart;
      prm [0].setAttr (RS_OUTFLAG);
      prm [1] = *nEnd;
      prm [1].setAttr (RS_OUTFLAG);
      TRsStat stat = invoke (0x0000000b, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      *nStart = prm [0];
      *nEnd = prm [1];
   }

   void ReplaceSel(const char* newText) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = newText;
      TRsStat stat = invoke (0x0000000c, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getFont(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }
   void putRefFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEnabled() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabled(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderLeft(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderLeft(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderRight(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderRight(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderTop(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderTop(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderBottom(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderBottom(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enBorderType getBorderType() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000100, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enBorderType((short int)prm.retVal ());
   }
   void putBorderType(enBorderType Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000100, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enLineStyle getBorderStyle() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000150, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enLineStyle((short int)prm.retVal ());
   }
   void putBorderStyle(enLineStyle Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000150, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getBorderColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000151, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBorderColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000151, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getBorderWidth() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000152, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBorderWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000152, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAutosize() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAutosize(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginLeft() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000011, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginLeft(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000011, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginRight() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000012, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginRight(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000012, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginTop() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000013, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginTop(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000013, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginBottom() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000014, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginBottom(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000014, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getText(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfb, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putText(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfb, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getReadOnly() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0300000c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putReadOnly(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0300000c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getPassword() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putPassword(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enHorAlign getHorAlign() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enHorAlign((short int)prm.retVal ());
   }
   void putHorAlign(enHorAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enVertAlign getVertAlign() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enVertAlign((short int)prm.retVal ());
   }
   void putVertAlign(enVertAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getSelBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putSelBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getSelForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putSelForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   template<typename  TOut>
   void getValue(TOut* retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      *retVal = (TOut)prm.retVal ();
   }
   template<>
   void getValue(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void getValue (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = invoke(0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (app, stat);
   }
   template<typename  T1>
   void putValue(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enValType getValType() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x02000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enValType((short int)prm.retVal ());
   }
   void putValType(enValType Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x02000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getFormat(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x02000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putFormat(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x02000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getLimitText() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000014, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putLimitText(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000014, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enEditBtnType getButtonType() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000009, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enEditBtnType((short int)prm.retVal ());
   }
   void putButtonType(enEditBtnType Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000009, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getButtonWidth() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0300000a, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putButtonWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0300000a, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getButtonCaption(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0300000b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putButtonCaption(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0300000b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getValid() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdf4, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void addOnChanged (MemberFunction* ptr)
   {
      addHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnChanged (MemberFunction* ptr)
   {
      remHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnBtnClick (MemberFunction* ptr)
   {
      addHandler (0x00000002, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnBtnClick (MemberFunction* ptr)
   {
      remHandler (0x00000002, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnSpinUp (MemberFunction* ptr)
   {
      addHandler (0x00000003, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnSpinUp (MemberFunction* ptr)
   {
      remHandler (0x00000003, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnSpinDown (MemberFunction* ptr)
   {
      addHandler (0x00000004, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnSpinDown (MemberFunction* ptr)
   {
      remHandler (0x00000004, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnDataChanged (MemberFunction* ptr)
   {
      addHandler (0x00000005, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnDataChanged (MemberFunction* ptr)
   {
      remHandler (0x00000005, RSCOM_EVENT_LEVEL, ptr);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TMultilineEdit)*/
class TMultilineEdit: public TControl
{
public:
   TMultilineEdit (TAppObj* appPtr):
      TControl (appPtr) {};

   virtual ~TMultilineEdit () {};

   RSCOM_CONSTRUCT(TMultilineEdit)

   void HideBaloon() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000008, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void ShowBaloon(const char* baloonText) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = baloonText;
      TRsStat stat = invoke (0x00000009, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void SetSel(long nStart, long nEnd) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = nStart;
      prm [1] = nEnd;
      TRsStat stat = invoke (0x0000000a, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void GetSel(long* nStart, long* nEnd) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = *nStart;
      prm [0].setAttr (RS_OUTFLAG);
      prm [1] = *nEnd;
      prm [1].setAttr (RS_OUTFLAG);
      TRsStat stat = invoke (0x0000000b, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      *nStart = prm [0];
      *nEnd = prm [1];
   }

   void ReplaceSel(const char* newText) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = newText;
      TRsStat stat = invoke (0x0000000c, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getFont(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }
   void putRefFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEnabled() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabled(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderLeft(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderLeft(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderRight(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderRight(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderTop(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderTop(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderBottom(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderBottom(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enBorderType getBorderType() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000100, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enBorderType((short int)prm.retVal ());
   }
   void putBorderType(enBorderType Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000100, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enLineStyle getBorderStyle() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000150, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enLineStyle((short int)prm.retVal ());
   }
   void putBorderStyle(enLineStyle Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000150, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getBorderColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000151, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBorderColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000151, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getBorderWidth() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000152, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBorderWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000152, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAutosize() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAutosize(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginLeft() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000011, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginLeft(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000011, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginRight() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000012, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginRight(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000012, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginTop() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000013, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginTop(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000013, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginBottom() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000014, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginBottom(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000014, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getText(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putText(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getReadOnly() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0300000c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putReadOnly(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0300000c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enHorAlign getAlign() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enHorAlign((short int)prm.retVal ());
   }
   void putAlign(enHorAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enMlEditStyle getStyle() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x06000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enMlEditStyle((short int)prm.retVal ());
   }
   void putStyle(enMlEditStyle Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x06000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getWantReturn() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000016, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putWantReturn(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000016, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void addOnChanged (MemberFunction* ptr)
   {
      addHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnChanged (MemberFunction* ptr)
   {
      remHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnDataChanged (MemberFunction* ptr)
   {
      addHandler (0x00000005, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnDataChanged (MemberFunction* ptr)
   {
      remHandler (0x00000005, RSCOM_EVENT_LEVEL, ptr);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TLabel)*/
class TLabel: public TControl
{
public:
   TLabel (TAppObj* appPtr):
      TControl (appPtr) {};

   virtual ~TLabel () {};

   RSCOM_CONSTRUCT(TLabel)

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getFont(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }
   void putRefFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEnabled() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabled(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderLeft(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderLeft(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderRight(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderRight(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderTop(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderTop(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderBottom(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderBottom(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enBorderType getBorderType() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000100, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enBorderType((short int)prm.retVal ());
   }
   void putBorderType(enBorderType Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000100, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enLineStyle getBorderStyle() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000150, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enLineStyle((short int)prm.retVal ());
   }
   void putBorderStyle(enLineStyle Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000150, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getBorderColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000151, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBorderColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000151, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getBorderWidth() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000152, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBorderWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000152, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAutosize() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAutosize(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginLeft() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000011, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginLeft(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000011, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginRight() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000012, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginRight(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000012, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginTop() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000013, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginTop(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000013, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginBottom() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000014, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginBottom(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000014, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getText(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putText(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enHorAlign getHorAlign() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enHorAlign((short int)prm.retVal ());
   }
   void putHorAlign(enHorAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enVertAlign getVertAlign() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enVertAlign((short int)prm.retVal ());
   }
   void putVertAlign(enVertAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getTransparent() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putTransparent(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getMnemonic() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0300000f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMnemonic(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0300000f, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TButton)*/
class TButton: public TControl
{
public:
   TButton (TAppObj* appPtr):
      TControl (appPtr) {};

   virtual ~TButton () {};

   RSCOM_CONSTRUCT(TButton)

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getFont(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }
   void putRefFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEnabled() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabled(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getCaption(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfb, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putCaption(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfb, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getFlat() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putFlat(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enHorAlign getHorAlign() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enHorAlign((short int)prm.retVal ());
   }
   void putHorAlign(enHorAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enVertAlign getVertAlign() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enVertAlign((short int)prm.retVal ());
   }
   void putVertAlign(enVertAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getTakeFocusOnClick() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0300000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putTakeFocusOnClick(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0300000d, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getTakeFocusOnMnemonic() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0300000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putTakeFocusOnMnemonic(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0300000e, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAutosize() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAutosize(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderLeft(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderLeft(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderRight(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderRight(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderTop(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderTop(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderBottom(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderBottom(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getPicture(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdf5, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putPicture(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdf5, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }
   void putRefPicture(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdf5, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enBtnPicturePos getPicturePosition() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0100000a, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enBtnPicturePos((short int)prm.retVal ());
   }
   void putPicturePosition(enBtnPicturePos Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0100000a, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void addOnClick (MemberFunction* ptr)
   {
      addHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnClick (MemberFunction* ptr)
   {
      remHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TCheck)*/
class TCheck: public TControl
{
public:
   TCheck (TAppObj* appPtr):
      TControl (appPtr) {};

   virtual ~TCheck () {};

   RSCOM_CONSTRUCT(TCheck)

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getFont(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }
   void putRefFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEnabled() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabled(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getCaption(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfb, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putCaption(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfb, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getFlat() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putFlat(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enHorAlign getHorAlign() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enHorAlign((short int)prm.retVal ());
   }
   void putHorAlign(enHorAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enVertAlign getVertAlign() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enVertAlign((short int)prm.retVal ());
   }
   void putVertAlign(enVertAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getTakeFocusOnClick() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0300000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putTakeFocusOnClick(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0300000d, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getTakeFocusOnMnemonic() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0300000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putTakeFocusOnMnemonic(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0300000e, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAutosize() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAutosize(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enCheckBtnState getChecked() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enCheckBtnState((short int)prm.retVal ());
   }
   void putChecked(enCheckBtnState Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getPushLike() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000006, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putPushLike(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000006, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getLeftText() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000007, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putLeftText(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000007, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getSelForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putSelForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getSelBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putSelBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getTransparent() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putTransparent(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginLeft() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000011, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginLeft(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000011, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginRight() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000012, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginRight(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000012, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginTop() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000013, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginTop(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000013, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginBottom() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000014, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginBottom(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000014, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getTriState() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putTriState(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderLeft(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderLeft(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderRight(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderRight(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderTop(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderTop(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderBottom(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderBottom(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void addOnSet (MemberFunction* ptr)
   {
      addHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnSet (MemberFunction* ptr)
   {
      remHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TRadio)*/
class TRadio: public TControl
{
public:
   TRadio (TAppObj* appPtr):
      TControl (appPtr) {};

   virtual ~TRadio () {};

   RSCOM_CONSTRUCT(TRadio)

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getFont(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }
   void putRefFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEnabled() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabled(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getCaption(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfb, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putCaption(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfb, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getFlat() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putFlat(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enHorAlign getHorAlign() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enHorAlign((short int)prm.retVal ());
   }
   void putHorAlign(enHorAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enVertAlign getVertAlign() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enVertAlign((short int)prm.retVal ());
   }
   void putVertAlign(enVertAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getTakeFocusOnClick() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0300000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putTakeFocusOnClick(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0300000d, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getTakeFocusOnMnemonic() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0300000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putTakeFocusOnMnemonic(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0300000e, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAutosize() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAutosize(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enCheckBtnState getChecked() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enCheckBtnState((short int)prm.retVal ());
   }
   void putChecked(enCheckBtnState Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getPushLike() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000006, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putPushLike(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000006, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getLeftText() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000007, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putLeftText(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000007, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getSelForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putSelForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getSelBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putSelBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getTransparent() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putTransparent(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginLeft() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000011, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginLeft(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000011, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginRight() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000012, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginRight(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000012, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginTop() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000013, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginTop(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000013, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getMarginBottom() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000014, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMarginBottom(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000014, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderLeft(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderLeft(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderRight(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderRight(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderTop(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderTop(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderBottom(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderBottom(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void addOnSet (MemberFunction* ptr)
   {
      addHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnSet (MemberFunction* ptr)
   {
      remHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TListBox)*/
class TListBox: public TControl
{
public:
   TListBox (TAppObj* appPtr):
      TControl (appPtr) {};

   virtual ~TListBox () {};

   RSCOM_CONSTRUCT(TListBox)

   long AddItem(const char* str) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = str;
      TRsStat stat = invoke (0x00000002, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   long InsertItem(long iId, const char* str) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, true, RSFM_CODEPAGE);
      prm [0] = iId;
      prm [1] = str;
      TRsStat stat = invoke (0x00000003, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void GetItem(TRsString& retVal, long iId) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = iId;
      TRsStat stat = invoke (0x00000004, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }

   long SetItem(long iId, const char* str) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, true, RSFM_CODEPAGE);
      prm [0] = iId;
      prm [1] = str;
      TRsStat stat = invoke (0x00000005, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void SwapItems(long iId1, long iId2) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = iId1;
      prm [1] = iId2;
      TRsStat stat = invoke (0x00000006, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void DeleteItem(long iId) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = iId;
      TRsStat stat = invoke (0x00000007, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void DeleteAllItems() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000008, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long FindItem(const char* str) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = str;
      TRsStat stat = invoke (0x00000009, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   long SelectItem(const char* str) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = str;
      TRsStat stat = invoke (0x0000000a, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   long GetCount() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000000b, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   long GetItemData(long iId) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = iId;
      TRsStat stat = invoke (0x0000000c, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void SetItemData(long iId, long data) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = iId;
      prm [1] = data;
      TRsStat stat = invoke (0x0000000d, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void SetSel(long iId, bool select) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = iId;
      prm [1] = select;
      TRsStat stat = invoke (0x00000032, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long GetSelCount() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000033, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   long GetNextSelItem(long iPrevId) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = iPrevId;
      TRsStat stat = invoke (0x00000034, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void SetCheck(long iId, enCheckBtnState newVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = iId;
      prm [1] = newVal;
      TRsStat stat = invoke (0x00000035, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enCheckBtnState GetCheck(long iId) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = iId;
      TRsStat stat = invoke (0x00000036, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enCheckBtnState((short int)prm.retVal ());
   }

   void EnableItem(long iId, bool newVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = iId;
      prm [1] = newVal;
      TRsStat stat = invoke (0x00000037, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool IsItemEnabled(long iId) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = iId;
      TRsStat stat = invoke (0x00000038, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getFont(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }
   void putRefFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEnabled() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabled(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getCurSel() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000011, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putCurSel(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000011, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getCurSelData() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putCurSelData(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getValid() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdf4, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void getBorder(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorder(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enBorderType getBorderType() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000100, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enBorderType((short int)prm.retVal ());
   }
   void putBorderType(enBorderType Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000100, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enLineStyle getBorderStyle() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000150, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enLineStyle((short int)prm.retVal ());
   }
   void putBorderStyle(enLineStyle Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000150, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getBorderColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000151, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBorderColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000151, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getBorderWidth() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000152, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBorderWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000152, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enListBoxSelMode getSelMode() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x05000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enListBoxSelMode((short int)prm.retVal ());
   }
   void putSelMode(enListBoxSelMode Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x05000002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getMultiColumn() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000012, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMultiColumn(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000012, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getColumnWidth() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000013, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putColumnWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000013, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getChecks() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000015, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putChecks(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000015, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getCheckTriState() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putCheckTriState(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void addOnSelChanged (MemberFunction* ptr)
   {
      addHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnSelChanged (MemberFunction* ptr)
   {
      remHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnCheckChanged (MemberFunction* ptr)
   {
      addHandler (0x00000002, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnCheckChanged (MemberFunction* ptr)
   {
      remHandler (0x00000002, RSCOM_EVENT_LEVEL, ptr);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TComboBox)*/
class TComboBox: public TControl
{
public:
   TComboBox (TAppObj* appPtr):
      TControl (appPtr) {};

   virtual ~TComboBox () {};

   RSCOM_CONSTRUCT(TComboBox)

   long AddItem(const char* str) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = str;
      TRsStat stat = invoke (0x00000002, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   long InsertItem(long iId, const char* str) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, true, RSFM_CODEPAGE);
      prm [0] = iId;
      prm [1] = str;
      TRsStat stat = invoke (0x00000003, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void GetItem(TRsString& retVal, long iId) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = iId;
      TRsStat stat = invoke (0x00000004, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }

   long SetItem(long iId, const char* str) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, true, RSFM_CODEPAGE);
      prm [0] = iId;
      prm [1] = str;
      TRsStat stat = invoke (0x00000005, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void SwapItems(long iId1, long iId2) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = iId1;
      prm [1] = iId2;
      TRsStat stat = invoke (0x00000006, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void DeleteItem(long iId) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = iId;
      TRsStat stat = invoke (0x00000007, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void DeleteAllItems() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000008, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long FindItem(const char* str) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = str;
      TRsStat stat = invoke (0x00000009, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   long SelectItem(const char* str) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = str;
      TRsStat stat = invoke (0x0000000a, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   long GetCount() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000000b, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   long GetItemData(long iId) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = iId;
      TRsStat stat = invoke (0x0000000c, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void SetItemData(long iId, long data) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = iId;
      prm [1] = data;
      TRsStat stat = invoke (0x0000000d, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getFont(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }
   void putRefFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEnabled() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabled(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getCurSel() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000011, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putCurSel(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000011, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getCurSelData() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putCurSelData(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getValid() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdf4, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   enComboBoxStyle getStyle() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x05000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enComboBoxStyle((short int)prm.retVal ());
   }
   void putStyle(enComboBoxStyle Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x05000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getListDisplayCount() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x05000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putListDisplayCount(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x05000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getEditText(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfb, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putEditText(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfb, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAutosize() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAutosize(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderLeft(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderLeft(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderRight(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderRight(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderTop(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderTop(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorderBottom(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorderBottom(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void addOnSelChanged (MemberFunction* ptr)
   {
      addHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnSelChanged (MemberFunction* ptr)
   {
      remHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnChanged (MemberFunction* ptr)
   {
      addHandler (0x00000002, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnChanged (MemberFunction* ptr)
   {
      remHandler (0x00000002, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnDataChanged (MemberFunction* ptr)
   {
      addHandler (0x00000005, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnDataChanged (MemberFunction* ptr)
   {
      remHandler (0x00000005, RSCOM_EVENT_LEVEL, ptr);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TShape)*/
class TShape: public TControl
{
public:
   TShape (TAppObj* appPtr):
      TControl (appPtr) {};

   virtual ~TShape () {};

   RSCOM_CONSTRUCT(TShape)

   enShapeType getShape() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x04000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enShapeType((short int)prm.retVal ());
   }
   void putShape(enShapeType Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x04000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enFillType getFill() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x04000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enFillType((short int)prm.retVal ());
   }
   void putFill(enFillType Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x04000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getFillColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putFillColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enFillForeType getFillFore() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x04000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enFillForeType((short int)prm.retVal ());
   }
   void putFillFore(enFillForeType Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x04000002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getFillForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putFillForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enLineStyle getLineStyle() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000101, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enLineStyle((short int)prm.retVal ());
   }
   void putLineStyle(enLineStyle Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000101, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getLineColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000102, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putLineColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000102, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getLineWidth() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000103, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putLineWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000103, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enLineDirection getLineDirection() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x04000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enLineDirection((short int)prm.retVal ());
   }
   void putLineDirection(enLineDirection Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x04000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TProgress)*/
class TProgress: public TControl
{
public:
   TProgress (TAppObj* appPtr):
      TControl (appPtr) {};

   virtual ~TProgress () {};

   RSCOM_CONSTRUCT(TProgress)

   long SetPos(long nPos) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = nPos;
      TRsStat stat = invoke (0x00000002, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   long OffsetPos(long nPos) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = nPos;
      TRsStat stat = invoke (0x00000003, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   long StepIt() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000004, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getRangeLower() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x02000015, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putRangeLower(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x02000015, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getRangeUpper() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x02000016, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putRangeUpper(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x02000016, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getStep() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x07000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putStep(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x07000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getVertical() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x02000014, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putVertical(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x02000014, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getSmooth() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x07000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putSmooth(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x07000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getPos() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putPos(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorder(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorder(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enBorderType getBorderType() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000100, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enBorderType((short int)prm.retVal ());
   }
   void putBorderType(enBorderType Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000100, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enLineStyle getBorderStyle() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000150, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enLineStyle((short int)prm.retVal ());
   }
   void putBorderStyle(enLineStyle Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000150, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getBorderColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000151, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBorderColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000151, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getBorderWidth() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000152, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBorderWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000152, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TSlider)*/
class TSlider: public TControl
{
public:
   TSlider (TAppObj* appPtr):
      TControl (appPtr) {};

   virtual ~TSlider () {};

   RSCOM_CONSTRUCT(TSlider)

   long GetNumTics() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000002, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   long GetTic(long nTic) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = nTic;
      TRsStat stat = invoke (0x00000003, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void SetTic(long nTic) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = nTic;
      TRsStat stat = invoke (0x00000004, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long GetTicPos(long nTic) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = nTic;
      TRsStat stat = invoke (0x00000005, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   long GetTicFromArray(long nIdx) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = nIdx;
      TRsStat stat = invoke (0x00000006, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void SetTicFreq(long nFreq) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = nFreq;
      TRsStat stat = invoke (0x00000007, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void ClearTics() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000008, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void ClearSel() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000009, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void VerifyPos() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000000a, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEnabled() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabled(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getRangeMin() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x02000015, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putRangeMin(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x02000015, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getRangeMax() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x02000016, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putRangeMax(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x02000016, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getLineSize() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x08000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putLineSize(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x08000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getPageSize() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x08000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putPageSize(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x08000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getThumbLength() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x02000018, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putThumbLength(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x02000018, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getVertical() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x02000014, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putVertical(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x02000014, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enSldPoint getPoint() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x08000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enSldPoint((short int)prm.retVal ());
   }
   void putPoint(enSldPoint Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x08000002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getTicks() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x08000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putTicks(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x08000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAutoTicks() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x08000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAutoTicks(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x08000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getSelection() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x02000011, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putSelection(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x02000011, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getPos() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putPos(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getSelStart() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x02000012, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putSelStart(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x02000012, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getSelEnd() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x02000013, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putSelEnd(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x02000013, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void addOnThumbTrack (MemberFunction* ptr)
   {
      addHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnThumbTrack (MemberFunction* ptr)
   {
      remHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TSplitter)*/
class TSplitter: public TControl
{
public:
   TSplitter (TAppObj* appPtr):
      TControl (appPtr) {};

   virtual ~TSplitter () {};

   RSCOM_CONSTRUCT(TSplitter)

   double getPercentPosition() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putPercentPosition(double Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getVertical() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x02000014, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putVertical(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x02000014, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getBorderEnable() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000010, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBorderEnable(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000010, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enSplitDragMode getDragMode() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x08000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enSplitDragMode((short int)prm.retVal ());
   }
   void putDragMode(enSplitDragMode Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x08000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getFirstControl(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0200001a, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putFirstControl(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0200001a, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getSecondControl(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0200001b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putSecondControl(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0200001b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getFirstPaneMinSize() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x08000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putFirstPaneMinSize(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x08000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getSecondPaneMinSize() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x08000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putSecondPaneMinSize(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x08000002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void addOnPosChanged (MemberFunction* ptr)
   {
      addHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnPosChanged (MemberFunction* ptr)
   {
      remHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TTreeItem)*/
class TTreeItem: public TRsPtr<IDispObj>
{
public:
   void EnsureVisible() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0100210a, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void EditItemText() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0100210b, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void Sort(bool bRecurse) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, false, RSFM_CODEPAGE);
      prm [0] = bRecurse;
      TRsStat stat = p->invoke (0x01002107, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void SortCB(bool bRecurse) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, false, RSFM_CODEPAGE);
      prm [0] = bRecurse;
      TRsStat stat = p->invoke (0x01002132, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void ExpandToggle() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01002122, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool IsChecked() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x03000000, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   void SetChecked(bool newVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, false, RSFM_CODEPAGE);
      prm [0] = newVal;
      TRsStat stat = p->invoke (0x01002131, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getPos() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000017, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putPos(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x02000017, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool getSelected() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffdf1, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putSelected(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0xfffffdf1, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   template<typename  TOut>
   void getUserData(TOut* retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01002109, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      *retVal = (TOut)prm.retVal ();
   }
   template<>
   void getUserData(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01002109, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void getUserData (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = p->invoke(0x01002109, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj(), stat);
   }
   template<typename  T1>
   void putUserData(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01002109, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }
   template<typename  T1>
   void putRefUserData(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01002109, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getText(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffdfb, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putText(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0xfffffdfb, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   template<typename  TOut>
   void getIconId(TOut* retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0100000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      *retVal = (TOut)prm.retVal ();
   }
   template<>
   void getIconId(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0100000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void getIconId (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = p->invoke(0x0100000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj(), stat);
   }
   template<typename  T1>
   void putIconId(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x0100000d, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   template<typename  TOut>
   void getSelIconId(TOut* retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0100000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      *retVal = (TOut)prm.retVal ();
   }
   template<>
   void getSelIconId(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0100000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void getSelIconId (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = p->invoke(0x0100000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj(), stat);
   }
   template<typename  T1>
   void putSelIconId(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x0100000e, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool getExpanded() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01002123, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putExpanded(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01002123, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getParent(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01002121, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void getNext(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01002124, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void getPrev(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01002125, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void getChildItems(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01002116, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   bool getCheckEnabled() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0100212e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putCheckEnabled(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x0100212e, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   unsigned long getItemSourceActions() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x10002139, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putItemSourceActions(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x10002139, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   unsigned long getItemDestActions() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x10002140, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putItemDestActions(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x10002140, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool getForceItemSerialization() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x10002141, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putForceItemSerialization(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x10002141, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getItemClasses(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x10002142, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putItemClasses(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x10002142, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getItemTargetClasses(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x10002143, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putItemTargetClasses(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x10002143, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TTreeItems)*/
class TTreeItems: public TRsPtr<IDispObj>
{
public:
   void AddEx(long Index, IDispObj* pItem) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 2, false, RSFM_CODEPAGE);
      prm [0] = Index;
      prm [1] = pItem;
      TRsStat stat = p->invoke (0x01002127, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void Add(IDispObj** retVal, long Index) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = Index;
      TRsStat stat = p->invoke (0x01002101, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void Remove(long Index) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, false, RSFM_CODEPAGE);
      prm [0] = Index;
      TRsStat stat = p->invoke (0x01002102, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void Clear() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffdd6, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getCount() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   void getItem(IDispObj** retVal, long Index) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = Index;
      TRsStat stat = p->invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void getFirst(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01002126, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TTree)*/
class TTree: public TControl
{
public:
   TTree (TAppObj* appPtr):
      TControl (appPtr) {};

   virtual ~TTree () {};

   RSCOM_CONSTRUCT(TTree)

   void New(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002129, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void AddEx(IDispObj* pItem, IDispObj* pAfter) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = pItem;
      prm [1] = pAfter;
      TRsStat stat = invoke (0x01002127, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void Add(IDispObj** retVal, IDispObj* pAfter) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = pAfter;
      TRsStat stat = invoke (0x01002101, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void Remove(IDispObj* pItem) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = pItem;
      TRsStat stat = invoke (0x01002102, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void ExpandToLevel(long toLevel) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = toLevel;
      TRsStat stat = invoke (0x0100212f, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void SetRedraw(bool fSetRedraw) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = fSetRedraw;
      TRsStat stat = invoke (0x01002130, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void Sort(bool bRecurse) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = bRecurse;
      TRsStat stat = invoke (0x01002107, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void SortCB(bool bRecurse) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = bRecurse;
      TRsStat stat = invoke (0x01002132, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getFont(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }
   void putRefFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEnabled() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabled(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorder(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorder(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enBorderType getBorderType() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000100, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enBorderType((short int)prm.retVal ());
   }
   void putBorderType(enBorderType Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000100, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enLineStyle getBorderStyle() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000150, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enLineStyle((short int)prm.retVal ());
   }
   void putBorderStyle(enLineStyle Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000150, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getBorderColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000151, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBorderColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000151, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getBorderWidth() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000152, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBorderWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000152, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getHasLines() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0100211d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putHasLines(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0100211d, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getLinesAtRoot() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000153, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putLinesAtRoot(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000153, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getHasButtons() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0100211e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putHasButtons(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0100211e, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEditableText() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002113, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEditableText(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01002113, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getShowSelAlways() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002115, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putShowSelAlways(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01002115, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getSingleExpand() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0100211f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putSingleExpand(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0100211f, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   short int getItemHeight() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002120, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putItemHeight(short int Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01002120, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getImageList(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0100000c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putImageList(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0100000c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getCurSel(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000011, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void getItems(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002116, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   bool getCheckboxes() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000015, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putCheckboxes(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000015, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAllowDragDrop() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000018, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAllowDragDrop(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000018, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void addOnEditTextBegin (MemberFunction* ptr)
   {
      addHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnEditTextBegin (MemberFunction* ptr)
   {
      remHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnEditTextEnd (MemberFunction* ptr)
   {
      addHandler (0x00000002, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnEditTextEnd (MemberFunction* ptr)
   {
      remHandler (0x00000002, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnItemExpanded (MemberFunction* ptr)
   {
      addHandler (0x00000003, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnItemExpanded (MemberFunction* ptr)
   {
      remHandler (0x00000003, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnSelChanged (MemberFunction* ptr)
   {
      addHandler (0x00000004, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnSelChanged (MemberFunction* ptr)
   {
      remHandler (0x00000004, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnCompare (MemberFunction* ptr)
   {
      addHandler (0x00000005, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnCompare (MemberFunction* ptr)
   {
      remHandler (0x00000005, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnItemDblClicks (MemberFunction* ptr)
   {
      addHandler (0x00000014, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnItemDblClicks (MemberFunction* ptr)
   {
      remHandler (0x00000014, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnItemRClick (MemberFunction* ptr)
   {
      addHandler (0x00000015, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnItemRClick (MemberFunction* ptr)
   {
      remHandler (0x00000015, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnItemReturn (MemberFunction* ptr)
   {
      addHandler (0x00000016, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnItemReturn (MemberFunction* ptr)
   {
      remHandler (0x00000016, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnCheckChanged (MemberFunction* ptr)
   {
      addHandler (0x00000017, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnCheckChanged (MemberFunction* ptr)
   {
      remHandler (0x00000017, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnGetData (MemberFunction* ptr)
   {
      addHandler (0x00000018, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnGetData (MemberFunction* ptr)
   {
      remHandler (0x00000018, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnSerializeData (MemberFunction* ptr)
   {
      addHandler (0x00000019, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnSerializeData (MemberFunction* ptr)
   {
      remHandler (0x00000019, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnDeSerializeData (MemberFunction* ptr)
   {
      addHandler (0x0000001a, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnDeSerializeData (MemberFunction* ptr)
   {
      remHandler (0x0000001a, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnSetData (MemberFunction* ptr)
   {
      addHandler (0x0000001b, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnSetData (MemberFunction* ptr)
   {
      remHandler (0x0000001b, RSCOM_EVENT_LEVEL, ptr);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TListCol)*/
class TListCol: public TRsPtr<IDispObj>
{
public:
   long getPos() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000017, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   void getText(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffdfb, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putText(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0xfffffdfb, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getWidth() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01002100, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01002100, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   enHorAlign getAlign() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return enHorAlign((short int)prm.retVal ());
   }
   void putAlign(enHorAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01000000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   template<typename  TOut>
   void getIconId(TOut* retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0100000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      *retVal = (TOut)prm.retVal ();
   }
   template<>
   void getIconId(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0100000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void getIconId (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = p->invoke(0x0100000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj(), stat);
   }
   template<typename  T1>
   void putIconId(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x0100000d, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getName(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x80010000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putName(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x80010000, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TListSubItem)*/
class TListSubItem: public TRsPtr<IDispObj>
{
public:
   void getText(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffdfb, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putText(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0xfffffdfb, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   template<typename  TOut>
   void getIconId(TOut* retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0100000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      *retVal = (TOut)prm.retVal ();
   }
   template<>
   void getIconId(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0100000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void getIconId (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = p->invoke(0x0100000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj(), stat);
   }
   template<typename  T1>
   void putIconId(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x0100000d, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TListItem)*/
class TListItem: public TRsPtr<IDispObj>
{
public:
   void EnsureVisible(bool bPartialOK) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, false, RSFM_CODEPAGE);
      prm [0] = bPartialOK;
      TRsStat stat = p->invoke (0x0100210a, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void EditItemText() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0100210b, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getText(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffdfb, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putText(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0xfffffdfb, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   template<typename  TOut>
   void getIconId(TOut* retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0100000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      *retVal = (TOut)prm.retVal ();
   }
   template<>
   void getIconId(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0100000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void getIconId (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = p->invoke(0x0100000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj(), stat);
   }
   template<typename  T1>
   void putIconId(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x0100000d, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getPos() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x02000017, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putPos(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x02000017, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool getSelected() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffdf1, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putSelected(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0xfffffdf1, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   template<typename  TOut>
   void getUserData(TOut* retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01002109, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      *retVal = (TOut)prm.retVal ();
   }
   template<>
   void getUserData(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x01002109, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void getUserData (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = p->invoke(0x01002109, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj(), stat);
   }
   template<typename  T1>
   void putUserData(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01002109, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }
   template<typename  T1>
   void putRefUserData(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x01002109, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getSubItem(IDispObj** retVal, long ColIndex) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = ColIndex;
      TRsStat stat = p->invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TList)*/
class TList: public TControl
{
public:
   TList (TAppObj* appPtr):
      TControl (appPtr) {};

   virtual ~TList () {};

   RSCOM_CONSTRUCT(TList)

   void New(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002129, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void AddEx(long Index, IDispObj* pItem) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = Index;
      prm [1] = pItem;
      TRsStat stat = invoke (0x01002127, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void Add(IDispObj** retVal, long Index) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = Index;
      TRsStat stat = invoke (0x01002101, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void Remove(long Index) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = Index;
      TRsStat stat = invoke (0x01002102, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void Clear() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdd6, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void ColNew(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0100212a, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void ColAddEx(long ColIndex, IDispObj* pCol) throw (XRSFormsError)
   {
      TParmArray prm (app, 2, false, RSFM_CODEPAGE);
      prm [0] = ColIndex;
      prm [1] = pCol;
      TRsStat stat = invoke (0x0100212b, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void ColAdd(IDispObj** retVal, long ColIndex) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = ColIndex;
      TRsStat stat = invoke (0x0100211b, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void ColRemove(long ColIndex) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = ColIndex;
      TRsStat stat = invoke (0x0100211c, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void GetSelectedCount(long* pCount) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = *pCount;
      prm [0].setAttr (RS_OUTFLAG);
      TRsStat stat = invoke (0x01002105, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      *pCount = prm [0];
   }

   long GetNextSelectedItem(long StartIndex) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = StartIndex;
      TRsStat stat = invoke (0x01002106, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void Sort() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002107, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void Arrange(bool fSnapToGrid) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = fSnapToGrid;
      TRsStat stat = invoke (0x01002108, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void SetRedraw(bool fSetRedraw) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = fSetRedraw;
      TRsStat stat = invoke (0x01002130, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void GetColByName(IDispObj** retVal, const char* Name) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = Name;
      TRsStat stat = invoke (0x10002138, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   unsigned long getBackColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBackColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe0b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getForeColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putForeColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdff, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getFont(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }
   void putRefFont(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffe00, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEnabled() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabled(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBorder(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putRefBorder(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enBorderType getBorderType() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000100, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enBorderType((short int)prm.retVal ());
   }
   void putBorderType(enBorderType Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000100, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enLineStyle getBorderStyle() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000150, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enLineStyle((short int)prm.retVal ());
   }
   void putBorderStyle(enLineStyle Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000150, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   unsigned long getBorderColor() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000151, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBorderColor(unsigned long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000151, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getBorderWidth() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000152, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putBorderWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000152, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enListViewStyle getStyle() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0100210c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enListViewStyle((short int)prm.retVal ());
   }
   void putStyle(enListViewStyle Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0100210c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enListViewAlign getAlign() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0100210d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enListViewAlign((short int)prm.retVal ());
   }
   void putAlign(enListViewAlign Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0100210d, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enListViewSort getSortMode() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0100210e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enListViewSort((short int)prm.retVal ());
   }
   void putSortMode(enListViewSort Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0100210e, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   enListColumnHeaderMode getColumnHeader() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0100210f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return enListColumnHeaderMode((short int)prm.retVal ());
   }
   void putColumnHeader(enListColumnHeaderMode Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0100210f, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getMultiSel() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002110, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putMultiSel(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01002110, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAutoArrange() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002111, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAutoArrange(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01002111, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getIconTextWrap() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002112, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putIconTextWrap(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01002112, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEditableText() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002113, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEditableText(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01002113, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getScrollable() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002114, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putScrollable(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01002114, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getShowSelAlways() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002115, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putShowSelAlways(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01002115, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getLeftScrollBar() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002103, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putLeftScrollBar(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01002103, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getImageList(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0100000c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putImageList(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0100000c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getLargeImageList(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0100000f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putLargeImageList(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0100000f, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getColImageList(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000010, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      retVal = TRsString (prm.retVal ());
   }
   void putColImageList(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000010, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getVirtualListMode() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01000015, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putVirtualListMode(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x01000015, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getBinder(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000000a, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   long getCount() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void getItem(IDispObj** retVal, long Index) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = Index;
      TRsStat stat = invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   bool getAllowDragDrop() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x03000018, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAllowDragDrop(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x03000018, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getColCount() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x01002119, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void getColItem(IDispObj** retVal, long ColIndex) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = ColIndex;
      TRsStat stat = invoke (0x0100211a, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void addOnEditTextBegin (MemberFunction* ptr)
   {
      addHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnEditTextBegin (MemberFunction* ptr)
   {
      remHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnEditTextEnd (MemberFunction* ptr)
   {
      addHandler (0x00000002, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnEditTextEnd (MemberFunction* ptr)
   {
      remHandler (0x00000002, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnColumnClicked (MemberFunction* ptr)
   {
      addHandler (0x00000003, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnColumnClicked (MemberFunction* ptr)
   {
      remHandler (0x00000003, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnSelChanged (MemberFunction* ptr)
   {
      addHandler (0x00000004, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnSelChanged (MemberFunction* ptr)
   {
      remHandler (0x00000004, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnCompare (MemberFunction* ptr)
   {
      addHandler (0x00000005, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnCompare (MemberFunction* ptr)
   {
      remHandler (0x00000005, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnItemDblClicks (MemberFunction* ptr)
   {
      addHandler (0x00000014, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnItemDblClicks (MemberFunction* ptr)
   {
      remHandler (0x00000014, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnItemRClick (MemberFunction* ptr)
   {
      addHandler (0x00000015, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnItemRClick (MemberFunction* ptr)
   {
      remHandler (0x00000015, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnItemReturn (MemberFunction* ptr)
   {
      addHandler (0x00000016, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnItemReturn (MemberFunction* ptr)
   {
      remHandler (0x00000016, RSCOM_EVENT_LEVEL, ptr);
   }

};
/*RSCOM_WRAPPER}}*/



#endif // !__RSCONTROLS_HPP__
