
//-*--------------------------------------------------------------------------*-
//
// File Name: rsgrid.hpp
//
// Copyright (c) 1991 - 2005 by R-Style Softlab.
// All Rights Reserved.
//
//-*--------------------------------------------------------------------------*-
// Fri Sep 29 15:03:50 2006  Automatically generated by code generator
//-*--------------------------------------------------------------------------*-

#ifndef __RSGRID_HPP__
#define __RSGRID_HPP__

/*ENUM_SECTION*/

/*{{RSCOM_ENUM(BorderStyleEnum)*/
#ifndef TYPEDEF_ENUM_BORDERSTYLEENUM
#define TYPEDEF_ENUM_BORDERSTYLEENUM
typedef enum BorderStyleEnum
{
   NoBorder = 0,
   FixedSingle = 1,
   FixedStatic = 2,
   FixedClient = 3
}
BorderStyleEnum;
#endif TYPEDEF_ENUM_BORDERSTYLEENUM
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(ChangeRowEnum)*/
#ifndef TYPEDEF_ENUM_CHANGEROWENUM
#define TYPEDEF_ENUM_CHANGEROWENUM
typedef enum ChangeRowEnum
{
   changeOnLoad = 0,
   changeOnSize = 1,
   changeOnAddRow = 2,
   changeOnDeleteRow = 3,
   changeOnNavigation = 4,
   changeOnCancelAddRow = 5,
   changeCanceled = 6
}
ChangeRowEnum;
#endif TYPEDEF_ENUM_CHANGEROWENUM
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(DataSourceTypeEnum)*/
#ifndef TYPEDEF_ENUM_DATASOURCETYPEENUM
#define TYPEDEF_ENUM_DATASOURCETYPEENUM
typedef enum DataSourceTypeEnum
{
   AutoDataSourceType = 0,
   DetailedDispatch = 1,
   SingleRowDispatch = 2,
   FlatDataSet = 3,
   LevelDataSet = 4,
   HierarchicalDataSet = 5
}
DataSourceTypeEnum;
#endif TYPEDEF_ENUM_DATASOURCETYPEENUM
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(HighlightModeEnum)*/
#ifndef TYPEDEF_ENUM_HIGHLIGHTMODEENUM
#define TYPEDEF_ENUM_HIGHLIGHTMODEENUM
typedef enum HighlightModeEnum
{
   HighlightNever = 0,
   HighlightAlways = 1,
   HighlightWithFocus = 2
}
HighlightModeEnum;
#endif TYPEDEF_ENUM_HIGHLIGHTMODEENUM
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(HorizontalAlignmentEnum)*/
#ifndef TYPEDEF_ENUM_HORIZONTALALIGNMENTENUM
#define TYPEDEF_ENUM_HORIZONTALALIGNMENTENUM
typedef enum HorizontalAlignmentEnum
{
   AlignDefault = 0,
   AlignLeft = 1,
   AlignRight = 2,
   AlignCenter = 3
}
HorizontalAlignmentEnum;
#endif TYPEDEF_ENUM_HORIZONTALALIGNMENTENUM
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(MarqueeStyleEnum)*/
#ifndef TYPEDEF_ENUM_MARQUEESTYLEENUM
#define TYPEDEF_ENUM_MARQUEESTYLEENUM
typedef enum MarqueeStyleEnum
{
   NoMarquee = 0,
   FocusRect = 1,
   SolidBorder = 2,
   FloatingEditor = 3
}
MarqueeStyleEnum;
#endif TYPEDEF_ENUM_MARQUEESTYLEENUM
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(SelectionModeEnum)*/
#ifndef TYPEDEF_ENUM_SELECTIONMODEENUM
#define TYPEDEF_ENUM_SELECTIONMODEENUM
typedef enum SelectionModeEnum
{
   NoSelection = 0,
   SelectionByRow = 1,
   SelectionByCell = 2
}
SelectionModeEnum;
#endif TYPEDEF_ENUM_SELECTIONMODEENUM
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(ScrollBarEnum)*/
#ifndef TYPEDEF_ENUM_SCROLLBARENUM
#define TYPEDEF_ENUM_SCROLLBARENUM
typedef enum ScrollBarEnum
{
   ScrollBarNone = 0,
   ScrollBarHorz = 1,
   ScrollBarVert = 2,
   ScrollBarBoth = 3
}
ScrollBarEnum;
#endif TYPEDEF_ENUM_SCROLLBARENUM
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(SortOrderEnum)*/
#ifndef TYPEDEF_ENUM_SORTORDERENUM
#define TYPEDEF_ENUM_SORTORDERENUM
typedef enum SortOrderEnum
{
   SortNone = 0,
   SortAscending = 1,
   SortDescending = -1
}
SortOrderEnum;
#endif TYPEDEF_ENUM_SORTORDERENUM
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(AutoWidthEnum)*/
#ifndef TYPEDEF_ENUM_AUTOWIDTHENUM
#define TYPEDEF_ENUM_AUTOWIDTHENUM
typedef enum AutoWidthEnum
{
   AutoWidthNone = 0,
   AutoWidthByCaption = 1,
   AutoWidthByValue = 2
}
AutoWidthEnum;
#endif TYPEDEF_ENUM_AUTOWIDTHENUM
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(ButtonPredefinesEnum)*/
#ifndef TYPEDEF_ENUM_BUTTONPREDEFINESENUM
#define TYPEDEF_ENUM_BUTTONPREDEFINESENUM
typedef enum ButtonPredefinesEnum
{
   TextButton = 1,
   CloseButton = 2,
   DeleteButton = 3,
   EllipsisButton = 4,
   DownButton = 5,
   LeftButton = 6,
   RightButton = 7,
   UpButton = 8,
   OkButton = 9,
   PlusButton = 10,
   MinusButton = 11,
   UndoButton = 12,
   RedoButton = 13,
   SpinDownButton = 14,
   SpinLeftButton = 15,
   SpinRightButton = 16,
   SpinUpButton = 17
}
ButtonPredefinesEnum;
#endif TYPEDEF_ENUM_BUTTONPREDEFINESENUM
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(DisplayStyleEnum)*/
#ifndef TYPEDEF_ENUM_DISPLAYSTYLEENUM
#define TYPEDEF_ENUM_DISPLAYSTYLEENUM
typedef enum DisplayStyleEnum
{
   DisplayText = 1,
   DisplayImage = 2,
   DisplayTextAndImage = 3
}
DisplayStyleEnum;
#endif TYPEDEF_ENUM_DISPLAYSTYLEENUM
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(FormatTypeEnum)*/
#ifndef TYPEDEF_ENUM_FORMATTYPEENUM
#define TYPEDEF_ENUM_FORMATTYPEENUM
typedef enum FormatTypeEnum
{
   FormatDefault = 0,
   FormatDate = 1,
   FormatTime = 2,
   FormatNumber = 3,
   FormatCustom = 4
}
FormatTypeEnum;
#endif TYPEDEF_ENUM_FORMATTYPEENUM
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(StyleIndeterminateEnum)*/
#ifndef TYPEDEF_ENUM_STYLEINDETERMINATEENUM
#define TYPEDEF_ENUM_STYLEINDETERMINATEENUM
typedef enum StyleIndeterminateEnum
{
   InactiveStyle = 1,
   InactiveCheckedStyle = 2,
   UncheckedStyle = 3
}
StyleIndeterminateEnum;
#endif TYPEDEF_ENUM_STYLEINDETERMINATEENUM
/*RSCOM_ENUM}}*/

/*{{RSCOM_ENUM(TextAlignmentEnum)*/
#ifndef TYPEDEF_ENUM_TEXTALIGNMENTENUM
#define TYPEDEF_ENUM_TEXTALIGNMENTENUM
typedef enum TextAlignmentEnum
{
   TextLeft = 1,
   TextRight = 2
}
TextAlignmentEnum;
#endif TYPEDEF_ENUM_TEXTALIGNMENTENUM
/*RSCOM_ENUM}}*/

/*CLASS_SECTION*/

/*{{RSCOM_WRAPPER(TGridColumn)*/
class TGridColumn: public TRsPtr<IDispObj>
{
public:
   long getId() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x80010001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   long getIndex() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   void getName(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putName(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getCaption(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putCaption(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   HorizontalAlignmentEnum getAlign() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return HorizontalAlignmentEnum((short int)prm.retVal ());
   }
   void putAlign(HorizontalAlignmentEnum Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getWidth() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000006, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000006, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getMinWidth() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000007, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putMinWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000007, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getMaxWidth() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putMaxWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getFieldName(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000009, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putFieldName(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000009, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getFieldIndex() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0000000a, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putFieldIndex(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x0000000a, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   bool getReadOnly() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0000000b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putReadOnly(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x0000000b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getSortIndex() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000015, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putSortIndex(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000015, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   SortOrderEnum getSortOrder() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000016, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return SortOrderEnum((short int)prm.retVal ());
   }
   void putSortOrder(SortOrderEnum Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000016, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getVisibleIndex() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000017, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putVisibleIndex(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000017, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getVisibleWidth() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000018, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putVisibleWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000018, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TGridColumnColl)*/
class TGridColumnColl: public TRsPtr<IDispObj>
{
public:
   void Add(IDispObj** retVal, const char* Name) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = Name;
      TRsStat stat = p->invoke (0xfffffdd7, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void Clear() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffdd6, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   template<typename  T1>
   void Remove(T1 value) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, false, RSFM_CODEPAGE);
      prm [0] = value;
      TRsStat stat = p->invoke (0xfffffdd5, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void Insert(IDispObj** retVal, long Index, const char* Name) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 2, true, RSFM_CODEPAGE);
      prm [0] = Index;
      prm [1] = Name;
      TRsStat stat = p->invoke (0x00000001, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   template<typename  T1>
   long IndexOf(T1 value) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = value;
      TRsStat stat = p->invoke (0x00000002, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   void RemoveAt(long Index) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, false, RSFM_CODEPAGE);
      prm [0] = Index;
      TRsStat stat = p->invoke (0x00000003, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void AddRange(long Count, long Index) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 2, false, RSFM_CODEPAGE);
      prm [0] = Count;
      prm [1] = Index;
      TRsStat stat = p->invoke (0x00000004, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void ChangeIndex(long toIndex, long fromIndex) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 2, false, RSFM_CODEPAGE);
      prm [0] = toIndex;
      prm [1] = fromIndex;
      TRsStat stat = p->invoke (0x00000005, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getItem(IDispObj** retVal, long Index) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = Index;
      TRsStat stat = p->invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   long getCount() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffded, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TGridColumnHeader)*/
class TGridColumnHeader: public TRsPtr<IDispObj>
{
public:
   long getIndex() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   template<typename  TOut>
   void getImage(TOut* retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      *retVal = (TOut)prm.retVal ();
   }
   template<>
   void getImage(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void getImage (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = p->invoke(0x00000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj(), stat);
   }
   template<typename  T1>
   void putImage(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getText(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putText(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   HorizontalAlignmentEnum getTextAlign() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return HorizontalAlignmentEnum((short int)prm.retVal ());
   }
   void putTextAlign(HorizontalAlignmentEnum Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TGridColumnHeaderColl)*/
class TGridColumnHeaderColl: public TRsPtr<IDispObj>
{
public:
   template<typename  T1>
   long IndexOf(T1 value) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = value;
      TRsStat stat = p->invoke (0x00000002, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   void getItem(IDispObj** retVal, long Index) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = Index;
      TRsStat stat = p->invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   long getCount() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffded, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   void getImageList(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0000000a, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putImageList(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x0000000a, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TGridDataRowItem)*/
class TGridDataRowItem: public TRsPtr<IDispObj>
{
public:
   long getIndex() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   template<typename  TOut>
   void getvalue(TOut* retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      *retVal = (TOut)prm.retVal ();
   }
   template<>
   void getvalue(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }
   void getvalue (IParmInfo* prm) throw (XRSFormsError)
   {
      TRsStat stat = p->invoke(0x00000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj(), stat);
   }
   template<typename  T1>
   void putvalue(T1 Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getEditorName(TRsString& retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      retVal = TRsString (prm.retVal ());
   }
   void putEditorName(const char* Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   long getEditorIndex() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x00000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }
   void putEditorIndex(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = p->invoke (0x00000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
   }

   void getEditors(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0000000a, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   void getRealEditor(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0x0000000b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TGridDataRow)*/
class TGridDataRow: public TRsPtr<IDispObj>
{
public:
   template<typename  T1>
   long IndexOf(T1 value) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = value;
      TRsStat stat = p->invoke (0x00000002, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

   void getItem(IDispObj** retVal, long Index) throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 1, true, RSFM_CODEPAGE);
      prm [0] = Index;
      TRsStat stat = p->invoke (0x00000000, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      if(prm.retVal ().getType() == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw XRSFormsError (p->getAppObj (), RSL_STAT_NOINTF);
         }
      else
         *retVal = NULL;
   }

   long getCount() throw (XRSFormsError)
   {
      TParmArray prm (p->getAppObj (), 0, true, RSFM_CODEPAGE);
      TRsStat stat = p->invoke (0xfffffded, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if (stat) throw XRSFormsError (p->getAppObj (), stat);
      return prm.retVal ();
   }

};
/*RSCOM_WRAPPER}}*/

/*{{RSCOM_WRAPPER(TGrid)*/
class TGrid: public TControl
{
public:
   TGrid (TAppObj* appPtr):
      TControl (appPtr) {};

   virtual ~TGrid () {};

   RSCOM_CONSTRUCT(TGrid)

   bool BeginEdit(long colNumber) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = colNumber;
      TRsStat stat = invoke (0x000003e8, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   bool EndEdit(bool shouldAbort) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, true, RSFM_CODEPAGE);
      prm [0] = shouldAbort;
      TRsStat stat = invoke (0x000003e9, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }

   void ExpandRow() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x000003ea, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void CollapseRow() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x000003eb, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void ExpandBranch(long depth) throw (XRSFormsError)
   {
      TParmArray prm (app, 1, false, RSFM_CODEPAGE);
      prm [0] = depth;
      TRsStat stat = invoke (0x000003ec, RS_DISP_METHOD, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getEnabled() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putEnabled(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0xfffffdfe, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAllowAddNew() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000001, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAllowAddNew(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000001, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAllowDelete() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000002, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAllowDelete(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000002, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAllowUpdate() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000003, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAllowUpdate(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000003, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAllowArrows() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000004, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAllowArrows(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000004, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAllowSort() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000005, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAllowSort(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000005, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAllowGroup() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000006, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAllowGroup(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000006, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAllowFilter() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000007, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAllowFilter(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000007, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAllowColumnResize() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000009, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAllowColumnResize(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000009, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAllowColumnReorder() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000008, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAllowColumnReorder(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000008, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   BorderStyleEnum getBorderStyle() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000000a, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return BorderStyleEnum((short int)prm.retVal ());
   }
   void putBorderStyle(BorderStyleEnum Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0000000a, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   MarqueeStyleEnum getMarqueeStyle() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000000b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return MarqueeStyleEnum((short int)prm.retVal ());
   }
   void putMarqueeStyle(MarqueeStyleEnum Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0000000b, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   HighlightModeEnum getHighlightMode() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000000c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return HighlightModeEnum((short int)prm.retVal ());
   }
   void putHighlightMode(HighlightModeEnum Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0000000c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   SelectionModeEnum getSelectionMode() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000000d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return SelectionModeEnum((short int)prm.retVal ());
   }
   void putSelectionMode(SelectionModeEnum Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0000000d, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAddBeforeMode() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000014, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAddBeforeMode(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000014, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAddLastedMode() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000015, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAddLastedMode(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000015, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getDataSource(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000001e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }
   void putDataSource(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0000001e, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }
   void putRefDataSource(IDispObj* Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0000001e, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   DataSourceTypeEnum getDataSourceType() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000001f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return DataSourceTypeEnum((short int)prm.retVal ());
   }
   void putDataSourceType(DataSourceTypeEnum Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0000001f, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getReadOnly() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000020, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putReadOnly(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000020, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void getColumns(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000028, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void getColumnHeaders(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000029, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   void getDataRowTemplate(IDispObj** retVal) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000002b, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      if (prm.retVal ().getType () == RSCOM_OBJ)
         {
         if (!((IRsObj*)prm.retVal ())->getInterface (IID_RSDISP, (void**)retVal))
            throw(XRSFormsError(app, RSL_STAT_NOINTF));
         }
      else
         *retVal = NULL;
   }

   bool getColumnHeadersVisible() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000002c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putColumnHeadersVisible(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0000002c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getHeadLines() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000002d, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putHeadLines(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0000002d, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getCurrentColumn() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000002e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putCurrentColumn(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0000002e, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getAutoWidthColumns() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000002f, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putAutoWidthColumns(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0000002f, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getRowHeadersVisible() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000032, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putRowHeadersVisible(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000032, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   long getRowHeaderWidth() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x00000033, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putRowHeaderWidth(long Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x00000033, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   ScrollBarEnum getScrollBars() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000000e, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return ScrollBarEnum((short int)prm.retVal ());
   }
   void putScrollBars(ScrollBarEnum Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0000000e, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   bool getReDraw() throw (XRSFormsError)
   {
      TParmArray prm (app, 0, true, RSFM_CODEPAGE);
      TRsStat stat = invoke (0x0000003c, RS_DISP_PROPERTYGET, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
      return prm.retVal ();
   }
   void putReDraw(bool Var1) throw (XRSFormsError)
   {
      TParmArray prm (app, 0, false, RSFM_CODEPAGE);
      prm.putVal () = Var1;
      TRsStat stat = invoke (0x0000003c, RS_DISP_PROPERTYPUT, prm, RSCOM_AX_LEVEL);
      if(stat) throw(XRSFormsError(app, stat));
   }

   void addBeforeAddRow (MemberFunction* ptr)
   {
      addHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }
   void remBeforeAddRow (MemberFunction* ptr)
   {
      remHandler (0x00000001, RSCOM_EVENT_LEVEL, ptr);
   }

   void addAfterAddRow (MemberFunction* ptr)
   {
      addHandler (0x00000002, RSCOM_EVENT_LEVEL, ptr);
   }
   void remAfterAddRow (MemberFunction* ptr)
   {
      remHandler (0x00000002, RSCOM_EVENT_LEVEL, ptr);
   }

   void addBeforeEditRow (MemberFunction* ptr)
   {
      addHandler (0x00000003, RSCOM_EVENT_LEVEL, ptr);
   }
   void remBeforeEditRow (MemberFunction* ptr)
   {
      remHandler (0x00000003, RSCOM_EVENT_LEVEL, ptr);
   }

   void addAfterEditRow (MemberFunction* ptr)
   {
      addHandler (0x00000004, RSCOM_EVENT_LEVEL, ptr);
   }
   void remAfterEditRow (MemberFunction* ptr)
   {
      remHandler (0x00000004, RSCOM_EVENT_LEVEL, ptr);
   }

   void addBeforeDeleteRow (MemberFunction* ptr)
   {
      addHandler (0x00000005, RSCOM_EVENT_LEVEL, ptr);
   }
   void remBeforeDeleteRow (MemberFunction* ptr)
   {
      remHandler (0x00000005, RSCOM_EVENT_LEVEL, ptr);
   }

   void addAfterDeleteRow (MemberFunction* ptr)
   {
      addHandler (0x00000006, RSCOM_EVENT_LEVEL, ptr);
   }
   void remAfterDeleteRow (MemberFunction* ptr)
   {
      remHandler (0x00000006, RSCOM_EVENT_LEVEL, ptr);
   }

   void addBeforeInsertRow (MemberFunction* ptr)
   {
      addHandler (0x00000007, RSCOM_EVENT_LEVEL, ptr);
   }
   void remBeforeInsertRow (MemberFunction* ptr)
   {
      remHandler (0x00000007, RSCOM_EVENT_LEVEL, ptr);
   }

   void addAfterInsertRow (MemberFunction* ptr)
   {
      addHandler (0x00000008, RSCOM_EVENT_LEVEL, ptr);
   }
   void remAfterInsertRow (MemberFunction* ptr)
   {
      remHandler (0x00000008, RSCOM_EVENT_LEVEL, ptr);
   }

   void addBeforeUpdateRow (MemberFunction* ptr)
   {
      addHandler (0x00000009, RSCOM_EVENT_LEVEL, ptr);
   }
   void remBeforeUpdateRow (MemberFunction* ptr)
   {
      remHandler (0x00000009, RSCOM_EVENT_LEVEL, ptr);
   }

   void addAfterUpdateRow (MemberFunction* ptr)
   {
      addHandler (0x0000000a, RSCOM_EVENT_LEVEL, ptr);
   }
   void remAfterUpdateRow (MemberFunction* ptr)
   {
      remHandler (0x0000000a, RSCOM_EVENT_LEVEL, ptr);
   }

   void addBeforeChangeCurrentRow (MemberFunction* ptr)
   {
      addHandler (0x0000000b, RSCOM_EVENT_LEVEL, ptr);
   }
   void remBeforeChangeCurrentRow (MemberFunction* ptr)
   {
      remHandler (0x0000000b, RSCOM_EVENT_LEVEL, ptr);
   }

   void addAfterChangeCurrentRow (MemberFunction* ptr)
   {
      addHandler (0x0000000c, RSCOM_EVENT_LEVEL, ptr);
   }
   void remAfterChangeCurrentRow (MemberFunction* ptr)
   {
      remHandler (0x0000000c, RSCOM_EVENT_LEVEL, ptr);
   }

   void addBeforeChangeCurrentColumn (MemberFunction* ptr)
   {
      addHandler (0x0000000d, RSCOM_EVENT_LEVEL, ptr);
   }
   void remBeforeChangeCurrentColumn (MemberFunction* ptr)
   {
      remHandler (0x0000000d, RSCOM_EVENT_LEVEL, ptr);
   }

   void addAfterChangeCurrentColumn (MemberFunction* ptr)
   {
      addHandler (0x0000000e, RSCOM_EVENT_LEVEL, ptr);
   }
   void remAfterChangeCurrentColumn (MemberFunction* ptr)
   {
      remHandler (0x0000000e, RSCOM_EVENT_LEVEL, ptr);
   }

   void addGetDataSourceParams (MemberFunction* ptr)
   {
      addHandler (0x0000000f, RSCOM_EVENT_LEVEL, ptr);
   }
   void remGetDataSourceParams (MemberFunction* ptr)
   {
      remHandler (0x0000000f, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnClick (MemberFunction* ptr)
   {
      addHandler (0x00000010, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnClick (MemberFunction* ptr)
   {
      remHandler (0x00000010, RSCOM_EVENT_LEVEL, ptr);
   }

   void addOnDoubleClick (MemberFunction* ptr)
   {
      addHandler (0x00000011, RSCOM_EVENT_LEVEL, ptr);
   }
   void remOnDoubleClick (MemberFunction* ptr)
   {
      remHandler (0x00000011, RSCOM_EVENT_LEVEL, ptr);
   }

};
/*RSCOM_WRAPPER}}*/



#endif // !__RSGRID_HPP__
